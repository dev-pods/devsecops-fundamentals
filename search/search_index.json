{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#github-devsecops-fundamentals-workshop-github-universe-2023","title":"GitHub DevSecOps Fundamentals | Workshop, GitHub Universe 2023","text":"<p>This self-paced workshop will enable you acquire the capabilities to implement a DevSecOps mindset, leveraging the GitHub platform for a seamless developer experience.</p> <p></p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<ul> <li> Collaborate effectively for high-velocity productivity</li> <li> Apply preventive security to every aspect of the development process</li> <li> Secure the software supply chain</li> <li> Automate product release and business processes in general</li> </ul> <p>Target Audience</p> <p>For participants at the start of their DevSecOps journey, the workshop addresses the following key concerns:</p> <ul> <li>How do I align the quest for high velocity delivery with the goals and visions of my organization?</li> <li>How do I efficiently develop a project and manage code?</li> <li>How do I securely package artifacts and store them for distribution?</li> <li>How do I securely deploy artifacts/packages?</li> <li>How do I generally automate processes in the business?</li> </ul> <p>For the experts who are further along or advanced in their DevSecOps adoption journey, the workshop provides guidance and challenges you to reduce complications in the implementation of DevSecOps practices:</p> <ul> <li>How do I consolidate tools and remove complications due to tool-bloat?</li> <li>How do I simplify the software supply chain process?</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Prepare before the workshop</p> <p>To ensure a seamless workshop experience, complete the following checklist items in order.</p> <ol> <li> <p> Set up a GitHub account</p> <p>Login to your GitHub  You may create a new GitHub account, if you do not already have one. (1)</p> <ol> <li> Keep your @handle handy.</li> </ol> <p> Create a new GitHub account </p> </li> <li> <p> Clone the workshop project to your own account</p> <ol> <li> Create workshop project</li> <li> <p>In the new tab, most of the prompts will automatically fill in for you.</p> <ul> <li>For owner, choose your personal account.</li> <li> <p>We recommend creating a public repository. (1)</p> <ol> <li> Public repositories benefit from<ul> <li>Free use of GitHub Actions minutes.</li> <li>Free use of GitHub Advanced Security features.</li> </ul> </li> </ol> </li> <li> <p>Scroll down and click the Create repository button at the bottom of the form.</p> <p></p> </li> </ul> </li> <li> <p>After your new repository is created, wait about 20 seconds, then refresh the page. </p> </li> </ol> </li> <li> <p> Enable Discussions</p> <p> Enabling GitHub Discussions on your repository </p> </li> <li> <p> Configure base security</p> <ol> <li>Navigate to the  Settings tab on your new workshop repository.</li> <li> <p>Under the Security section of the menu, select  Code security and analysis. Then configure the settings to match as follows.</p> <p></p> </li> </ol> <p></p> </li> <li> <p> Provision a new cloud development environment for the workshop</p> <p>GitHub Codespaces enables you to instantly start coding on the workshop project. Personal accounts on GitHub can benefit from a free quota of GitHub Codespaces usage.</p> <ol> <li> <p>Open the  Code  menu and click on  Create codespaces on main.</p> </li> <li> <p>Leave the development environment to initialize and run, we will come back to use it later.</p> <p></p> </li> </ol>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Secure at every step</li> <li>Start coding instantly with Codespaces</li> <li>Create diagrams to convey information through charts and graphs</li> <li>Include diagrams in your Markdown files with Mermaid</li> <li>Security hardening for GitHub Actions</li> <li>Security harden deployments with OpenID Connect</li> </ul>"},{"location":"Labs-Instructions/","title":"Introduction","text":""},{"location":"Labs-Instructions/Release-Automation/","title":"Release Automation","text":""},{"location":"Labs-Instructions/Software-Supply-Chain/","title":"Software Supply Chain Workshop","text":""},{"location":"Labs-Instructions/Software-Supply-Chain/#introduction","title":"Introduction","text":"<p>The goal of this lab is to create a software supply chain for the <code>Tetris</code> app. The software supply chain will consist of the following steps:</p> <ol> <li>Create Integration Checks</li> <li>Continuous Delivery</li> <li>Pre-Release</li> <li>Compliance</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#prerequisites","title":"Prerequisites","text":"<p>The same prerequisites as Lab 1 apply.</p>"},{"location":"Labs-Instructions/Software-Supply-Chain/#objectives","title":"Objectives","text":"<p>The objectives of this lab are to:</p> <ol> <li>Create Integration Checks for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a Continuous Delivery workflow for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a new pre-release <code>tag</code> for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a Compliance using CodeQL, Dependcy Review, and Dependabot.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#lab-outcomes","title":"Lab Outcomes","text":"<p>The outcomes of this lab are:</p> <ol> <li>Get familiar with GitHub Actions.</li> <li>Get familiar with GitHub Packages.</li> <li>Get familiar with the GitHub CodeQL analysis.</li> <li>Get familiar with the GitHub Dependency Review Action.</li> <li>Get familiar with the GitHub Dependabot.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#step-1-create-integration-checks","title":"Step 1: Create Integration Checks","text":"<p>The first step is to create a new integration check for the next version. Follow these steps:</p> <ol> <li>Navigate to <code>.github/workflows</code> and create a new file with the name <code>01.1.continuous.integration.yml</code>.</li> <li>Copy and paste the provided YAML code for running quality checks, UI tests, and security checks.</li> <li>Save the file and commit it to your repository.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#complete-example","title":"Complete Example","text":"<pre><code>name: Run Checks\n\non:\n  pull_request:\n    branches:\n      - main\n  workflow_call: {}\n\npermissions:\n  actions: write\n  contents: read\n  security-events: write\n  checks: write\n\nenv:\n  CI: 1\n  SITE_DIR: _site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"pages/githubuniverseworkshops/github-devsecops-fundamentals\"\n\njobs:\n  quality-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n      - name: Install NodeJS dependencies\n        run: npm ci\n      - name: Lint Python source\n        run: |\n          ruff check --format=github --select=E9,F63,F7,F82 --target-version=py311 .\n\n  ui-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n      - name: Install node dependencies\n        run: npm ci\n      - name: Install Playwright Browsers\n        run: npx playwright install --with-deps\n      - name: Run Playwright tests\n        run: npx playwright test\n      - uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n</code></pre>"},{"location":"Labs-Instructions/Software-Supply-Chain/#step-2-continuous-delivery","title":"Step 2: Continuous Delivery","text":"<p>In this step, you will create a new continuous delivery workflow for the next version. Follow these steps:</p> <ol> <li>Create a new file named <code>01.2.continuous.integration.yml</code> in the <code>.github/workflows</code> directory.</li> <li>Copy and paste the provided YAML code for running acceptance tests.</li> <li>Save the file and commit it to your repository.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#complete-example_1","title":"Complete Example","text":"<pre><code>name: Run Acceptance Tests\n\non:\n  pull_request:\n    branches: [ main ]\n  workflow_call: {}\n\npermissions:\n  actions: write\n  contents: read\n  security-events: write\n\nenv:\n  CI: 1\n  SITE_DIR: _site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"pages/githubuniverseworkshops/github-devsecops-fundamentals\"\n\njobs:\n  run-acceptance:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n      - name: Install Python Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n      - name: Install NodeJS Dependencies\n        run: npm ci\n      - name: Test Site Build\n        run: |\n          mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n      - name: Install Playwright Browsers\n        run: npx playwright install --with-deps\n      - name: Run UI Test\n        continue-on-error: true\n        run: npx playwright test\n      - name: Upload UI Test Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n</code></pre>"},{"location":"Labs-Instructions/Software-Supply-Chain/#docker-example","title":"Docker Example","text":"<p>The next step is to create a Docker container image and push it to GitHub Container Registry (GHCR). Follow these steps:</p> <ol> <li>Create a new file named <code>03.build-and-push-docker.yml</code> in the <code>.github/workflows</code> directory.</li> <li>Copy and paste the provided YAML code for building and pushing the Docker image.</li> <li>Save the file and commit it to your repository.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#complete-example_2","title":"Complete Example","text":"<pre><code>name: Package Container Image\n\non:\n  pull_request:\n    branches:\n      - main\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n  packages: write\n\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      # Connect to GitHub Container Registry (ghcr)\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push to GHCR\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n          context: ${{ github.workspace }}\n          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}\n</code></pre>"},{"location":"Labs-Instructions/Software-Supply-Chain/#step-3-create-pre-release-tag","title":"Step 3: Create Pre-Release Tag","text":"<p>GitHub Actions can be used to create a new tag for the next version. Follow these steps:</p> <ol> <li>Create a new file named <code>02.create.pre-release-tag.yml</code> in the <code>.github/workflows</code> directory.</li> <li>Copy and paste the provided YAML code for versioning the main branch.</li> <li>Save the file and commit it to your repository.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#complete-example_3","title":"Complete Example","text":"<pre><code>name: Version Changes to the Main Branch\n\non:\n  push:\n    branches:\n      - main\n  workflow_call: {}\n\njobs:\n  version-main-branch-changes:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n      - name: Get last version number\n        id: get_last_version\n        run: |\n          # Retrieve the last git tag, as we will only be processing one delivery line.\n          last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n          echo \"Last version is $last_version\"\n          echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n      - name: Get next version number\n        id: get_next_version\n        run: |\n          major=$(echo $last_version | cut -d. -f1)\n          minor=$(echo $last_version | cut -d. -f2)\n          patch=$(echo $last_version | cut -d. -f3)\n\n          next_patch=$((patch+1))\n\n          next_version=\"$major.$minor.$next_patch\"\n\n          echo \"Next version is $next_version\"\n          echo \"next_version=$next_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n        env:\n          last_version: ${{ steps.get_last_version.outputs.last_version }}\n      - name: Create tag for the next version\n        run: |\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n          git tag -a \"$next_version\" -m \"Version $next_version\"\n          git push origin \"$next_version\"\n        env:\n          next_version: ${{ steps.get_next_version.outputs.next_version }}-pre-release\n</code></pre>"},{"location":"Labs-Instructions/Software-Supply-Chain/#step-4-complaince","title":"Step 4: Complaince","text":"<p>optional during the dry-run to check the time and stick with 15 minutes</p> <p>In this step, you will create a new Dependabot configuration file. Follow these steps:</p> <ol> <li>Create a new file named <code>04.dependabot.yml</code> in the root directory of your repository.</li> <li>Copy and paste the provided YAML code for configuring Dependabot.</li> <li>Save the file.</li> </ol>"},{"location":"Labs-Instructions/Software-Supply-Chain/#complete-example_4","title":"Complete Example","text":"<pre><code>name: Complaince\n\non:\n  pull_request:\n    branches:\n      - main\n  workflow_call: {}\n\npermissions:\n  actions: write\n  contents: read\n  security-events: write\n  checks: write\n\nenv:\n  CI: 1\n  SITE_DIR: _site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"pages/githubuniverseworkshops/github-devsecops-fundamentals\"\n\njobs:\n  security-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Install node dependencies\n        run: npm ci\n      - name: Dependency Review\n        uses: actions/dependency-review-action@v3\n        with:\n          config-file: &gt;-\n            ./.github/dependency-review-config.yml\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: python,javascript\n          setup-python-dependencies: \"false\"\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n</code></pre> <p>Congratulations! You have completed the steps to set up a software supply chain for the <code>Tetris</code> app using GitHub Actions.</p>"},{"location":"Labs-Instructions/Version-Control/","title":"Version Control","text":"<p>Software development may be approached individually or collaboratively. In either case, there is a basic need for an accessible storage for software project files, and tracking evolution of the project. <code>git</code> helps to track project files and assets that, giving transparency to different points in the history of the software development enabling easy switches across those points. Yet there remains the goal to make <code>git</code> projects accessible on the go and to co-collaborators distributed across locations - GitHub as a platform enables every as of the software development lifecycle.</p> <p>How do I collaborate on goals? How do I efficiently develop a project and manage code?</p>"},{"location":"Labs-Instructions/Version-Control/#objectives","title":"Objectives","text":"<ul> <li> Create a Project board and define a task</li> <li> Rapidly onboard into the project</li> <li> Implement features motivated by relevance in the business value stream</li> <li> Locally validate work</li> <li> Collaborate with stakeholders to validate done requirement</li> </ul>"},{"location":"Labs-Instructions/Version-Control/#steps","title":"Steps","text":"<ol> <li>Value Stream Management</li> <li>Prerequisites</li> <li>Setup Development Environment</li> <li>Implement Features</li> <li>Run Test</li> <li>Collaborate with Team to Validate Work</li> </ol>"},{"location":"Labs-Instructions/Version-Control/#lab-instructions","title":"Lab Instructions","text":"<ul> <li>Install requirements</li> <li>add /home/codespace/.local/lib/python3.10/site-packages/bin/mkdocs to path</li> </ul>"},{"location":"Labs-Instructions/Version-Control/#github-repositories","title":"GitHub Repositories","text":"<ol> <li>Fork the repository</li> <li>Clone the forked repository to your local machine</li> <li>Create a new branch</li> <li>Create a new file</li> <li>Add the file to the repository</li> <li>Commit the file to the repository</li> <li>Push the file to the repository</li> <li>Create a pull request</li> <li>Merge the pull request</li> </ol>"},{"location":"Labs-Instructions/Version-Control/#codespaces-to-be-added-later","title":"Codespaces (To be added later)","text":"<ol> <li>Navigate to the repository</li> <li>Click on the <code>Code</code> button</li> <li>Click on the <code>Open with Codespaces</code> button</li> <li>Click on the <code>New codespace</code> button</li> <li>Wait for the codespace to be created</li> <li>Click on the <code>Open in VS Code</code> button</li> <li>Click on the <code>Terminal</code> menu item</li> <li>Click on the <code>New Terminal</code> menu item</li> <li> <p>Run the following command in the terminal window</p> <pre><code>docker-compose up -d\n</code></pre> </li> <li> <p>Click on the <code>Explorer</code> menu item</p> </li> <li>Click on the <code>README.md</code> file</li> <li>Click on the <code>Edit</code> button</li> </ol>"},{"location":"Labs-Instructions/Version-Control/#github-projects-and-issues","title":"GitHub Projects and Issues","text":"<ol> <li>Navigate to the repository</li> <li>Click on the <code>Projects</code> tab</li> <li>Click on the <code>Create a project</code> button</li> <li>Enter <code>Lab 1</code> for the project name</li> <li>Click on the <code>Create project</code> button</li> <li>Click on the <code>Add cards</code></li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Create a new branch</code> for the issue title</li> <li>Enter <code>Create a new branch</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Create a new file</code> for the issue title</li> <li>Enter <code>Create a new file</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Add the file to the repository</code> for the issue title</li> <li>Enter <code>Add the file to the repository</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Commit the file to the repository</code> for the issue title</li> <li>Enter <code>Commit the file to the repository</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Push the file to the repository</code> for the issue title</li> <li>Enter <code>Push the file to the repository</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Create a pull request</code> for the issue title</li> <li>Enter <code>Create a pull request</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Merge the pull request</code> for the issue title</li> <li>Enter <code>Merge the pull request</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Delete the branch</code> for the issue title</li> <li>Enter <code>Delete the branch</code> for the issue description</li> <li>Click on the <code>Submit new issue</code> button</li> <li>Click on the <code>Add an issue or pull request</code> button</li> <li>Click on the <code>Issues</code> tab</li> <li>Click on the <code>New issue</code> button</li> <li>Enter <code>Lab 1: Close the issue</code> for the issue title</li> <li>Enter <code>Close the issue</code> for the issue description</li> </ol>"},{"location":"Labs-Instructions/Version-Control/implement-features/","title":"Version Control - Implement Features","text":"<p>We want to implement a game of Tetris to excite our site visitors.</p>"},{"location":"Labs-Instructions/Version-Control/implement-features/#step-1-implement-the-game-and-integrate-it-into-the-site","title":"Step 1: Implement the game and integrate it into the site","text":""},{"location":"Labs-Instructions/Version-Control/prerequisites/","title":"Version Control - Prerequisites","text":""},{"location":"Labs-Instructions/Version-Control/prerequisites/#step-1-copy-this-template","title":"Step 1: Copy this Template","text":"<ol> <li>Login to your GitHub account</li> <li>Click Use this template</li> <li>Click Create a new repository</li> <li>In the Owner drop down menu, select an owner for the new repository (e.g. your username)</li> <li>In the Repository name field, enter a name</li> <li>Click Create repository</li> </ol>"},{"location":"Labs-Instructions/Version-Control/prerequisites/#step-2-open-the-repository","title":"Step 2: Open the Repository","text":"<p>Once your personal repository has been created, you will need to either clone it locally or open it in GitHub Codespaces. That way, you can create branches, make changes, and submit PRs  Choose the Open in Codespaces option.</p>"},{"location":"Labs-Instructions/Version-Control/prerequisites/#step-22-open-in-codespaces","title":"Step 2.2: Open in Codespaces","text":"<p>It's time to create your Codespace and start working on your application!</p> <ol> <li>Open the Code tab of this repository</li> <li>Click Code</li> <li>Click Create codespace on main    Once the codespace finishes setting up, you will have a fully-functional VS    Code environment in the cloud! All the core tools are already installed.</li> <li>Explore the environment!</li> </ol>"},{"location":"Labs-Instructions/Version-Control/prerequisites/#next-steps","title":"Next Steps","text":"<p>Continue on to Setup!</p>"},{"location":"Labs-Instructions/Version-Control/project-management/","title":"\ud83e\uddea Value Stream Management","text":"<p> We want to build a Tetris game to delight our site visitors.</p> <ol> <li>Create a project</li> <li>Create a board view</li> <li>Create a new issue describing our goal</li> </ol>"},{"location":"Labs-Instructions/Version-Control/setup/","title":"Version Control - Setup","text":"<p>Now that you have the lab code, you can start working on your application! This document will walk you through the initial setup steps so that you can start developing.</p>"},{"location":"Labs-Instructions/Version-Control/setup/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>Before you can run the sample app locally (or in your Codespace), you will need to install some dependencies.</p> <ol> <li>Run the following command to install the project requirements:</li> </ol> <pre><code>python3 -m pip install --requirement requirements.txt\n</code></pre> <ol> <li> <p>If you would like Codespaces to automatically do this for you next time you start working on the project you may add the following declaration into the root of the Codespaces configuration object:</p> <pre><code>{\n    ...\n    \"postStartCommand\": \"python3 -m pip install --requirement requirements.txt\"\n    ...\n}\n</code></pre> </li> <li> <p>Confirm that the site building tool is available by running the following command</p> </li> </ol> <pre><code>python3 -m mkdocs serve\n</code></pre>"},{"location":"Labs-Instructions/Version-Control/setup/#next-steps","title":"Next Steps","text":"<p>Now that you have rapidly onboarded yourself to the project, it time to Implement Features!</p>"}]}