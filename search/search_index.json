{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#github-devsecops-fundamentals-workshop-github-universe-2023","title":"GitHub DevSecOps Fundamentals | Workshop, GitHub Universe 2023","text":"<p>This self-paced workshop will enable you acquire the capabilities to implement a DevSecOps mindset, leveraging the GitHub platform for a seamless developer experience.</p> <p></p> <p> Complete the  Prerequisites checklist.</p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<ul> <li> Collaborate effectively for high-velocity productivity</li> <li> Apply preventive security to every aspect of the development process</li> <li> Implement a secure software supply chain</li> <li> Automate product release and business processes in general</li> <li> Remove complications due to tool-bloat</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Secure at every step</li> <li>Start coding instantly with Codespaces</li> <li>Create diagrams to convey information through charts and graphs</li> <li>Include diagrams in your Markdown files with Mermaid</li> <li>Security hardening for GitHub Actions</li> <li>Security harden deployments with OpenID Connect</li> </ul>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>To ensure a seamless workshop experience, complete the following checklist items in order.</p> <p>Prepare before the workshop</p> <ol> <li>"},{"location":"prerequisites/#set-up-a-github-account","title":"Set up a GitHub account","text":"<p>Login to your GitHub  You may create a new GitHub account, if you do not already have one. (1)</p> <ol> <li> Keep your @handle handy.</li> </ol> <p> Create a new GitHub account </p>"},{"location":"prerequisites/#clone-the-workshop-project-to-your-own-account","title":"Clone the workshop project to your own account","text":"<ol> <li> Create workshop project</li> <li> <p>In the new tab, most of the prompts will automatically fill in for you.</p> <ul> <li>For owner, choose your personal account.</li> <li> <p>We recommend creating a public repository. (1)</p> <ol> <li> <p> Public repositories benefit from</p> <ul> <li>Free use of GitHub Actions minutes.</li> <li>Free use of GitHub Advanced Security features.</li> </ul> </li> </ol> </li> <li> <p>Scroll down and click the Create repository button at the bottom of the form.</p> Example view <p></p> </li> </ul> </li> <li> <p>After your new repository is created, wait about 20 seconds, then refresh the page. </p> </li> </ol>"},{"location":"prerequisites/#enable-discussions","title":"Enable Discussions","text":"<p> Enabling GitHub Discussions on your repository </p>"},{"location":"prerequisites/#configure-base-security","title":"Configure base security","text":"<ol> <li>Navigate to the  Settings tab on your new workshop repository.</li> <li> <p>Under the Security section of the menu, select  Code security and analysis. Then configure the settings to match as follows (by clicking Enable where the option is/becomes available).</p> Example view <p></p> </li> </ol>"},{"location":"prerequisites/#create-a-github-app","title":"Create a GitHub App","text":"<ol> <li> <p>Goto to the profile menu at the top-right corner</p> <ul> <li>  Settings</li> <li>  Developer settings<ul> <li>  GitHub Apps<ul> <li> New GitHub App</li> </ul> </li> </ul> </li> </ul> Provide the form fields value as demonstrated here <p> </p> <p>On Repository permissions, select <code>Read and write</code> for the <code>Contents</code> scope.</p> <ul> <li>Generate a private key</li> <li>Goto <code>https://github.com/apps/&lt;YOUR-HANDLE&gt;-pusher-bot</code>. Install the app in the repository.</li> <li>Save app private key to secrets</li> <li>Save appid to vars</li> </ul> <p>Why a GitHub App is required</p> <p>When you use the repository's <code>GITHUB_TOKEN</code> to perform tasks, events triggered by the <code>GITHUB_TOKEN</code>, with the exception of <code>workflow_dispatch</code> and <code>repository_dispatch</code>, will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs. For example, if a workflow run pushes code using the repository's <code>GITHUB_TOKEN</code>, a new workflow will not run even when the repository contains a workflow configured to run when push events occur.</p> <p>If you do want to trigger a workflow from within a workflow run, you can use a GitHub App installation access token or a personal access token instead of <code>GITHUB_TOKEN</code> to trigger events that require a token.</p> <p>If you use a GitHub App, you'll need to create a GitHub App and store the app ID and private key as secrets.</p> <p>~Triggering a workflow from a workflow</p> </li> </ol>"},{"location":"prerequisites/#create-a-project-board-for-the-repository","title":"Create a project board for the repository","text":"<ol> <li> <p>Open the workshop repository in a new tab.</p> </li> <li> <p>Navigate to the  Projects tab on your new workshop repository.</p> </li> <li> <p>Open the  Link a project  dropdown menu. Then select the New Project option.</p> Example view <p></p> </li> <li> <p>Click on the  New project  button to start the project creation wizard.</p> </li> <li>Select the  Feature template.</li> <li> <p>Finally click on the Create button.</p> Example view <p></p> </li> </ol>"},{"location":"prerequisites/#provision-a-new-cloud-development-environment-for-the-workshop","title":"Provision a new cloud development environment for the workshop","text":"<p>GitHub Codespaces enables you to instantly start coding on the workshop project. Personal accounts on GitHub can benefit from a free quota of GitHub Codespaces usage.</p> <ol> <li> <p>Navigate to the  Code tab.</p> </li> <li> <p>Open the  Code  menu and click on  Create codespaces on main.</p> Example view <p></p> </li> <li> <p>Leave the development environment to initialize and run, we will come back to use it later.</p> </li> </ol>"},{"location":"exercises/","title":"Introduction","text":""},{"location":"exercises/#introduction","title":"Introduction","text":"<p> Create a Tetris Game</p> <p>The exercises provide you guidance for implementing DevSecOps at the fundamental level with the GitHub platform. On completion, you would have gained the experience to seamlessly implement capabilities in</p> <ul> <li> continuous collaboration</li> <li> continuous planning</li> <li> continuous integration</li> <li> continuous delivery</li> <li> continuous quality</li> <li> continuous security</li> </ul> Workshop ScenarioMilestonesProcess Outcome <p>You are working in a team that owns this site, and a new business goal has come into the vision of your organisation. In order to grow engagement with the site...</p> <p></p> <p>...the goal is to create a Tetris Game to delight our site visitors.</p> <p> Outcome: Tetris Game </p> <p>The workshop objectives will be delivered by completion of the following milestones</p> <p></p> <ul> <li> <p> Collaboration</p> <p>Facilitate onboarding into the site project and enable project development at high velocity for stakeholders of different experience with the project.</p> </li> <li> <p> Securing the software supply chain</p> <p>Seamlessly implement application security and secure the software supply chain.</p> </li> <li> <p> Release automation</p> <p>Get value to the end-user faster.</p> </li> </ul> <p>High Level Continuous Deployment Architecture</p> <pre><code>\nsequenceDiagram\n    actor D as Developer\n    actor R as Reviewers\n\n    participant GBF as Git Branch (Feature) &amp; PR\n    participant GMQ as GitHub Merge Queue\n    participant GBM as Git Branch (Main)\n\n    participant GT as Git Tag\n    participant DR as GitHub Docker Registry\n    participant GR as GitHub Release\n    participant ST as Staging\n    participant PRD as Production\n\n    D-&gt;&gt;GBF: Pushes &amp; opens\n    activate GBF\n    GBF-&gt;&gt;GBF: Continuous Integration\n    deactivate GBF\n\n    GBF--)+R: Notify changes\n    R-&gt;&gt;-GBF: Approves\n    GBF--)GMQ: Creates/Updates\n\n    activate GMQ\n    GMQ-&gt;&gt;GMQ: Continuous Integration\n    deactivate GMQ\n\n    GMQ-&gt;&gt;GBM: Merges\n    activate GBM\n    GBM-&gt;&gt;GBM: Versioning\n    GBM-&gt;&gt;GT: Creates\n    deactivate GBM\n\n\n    activate GT\n    GT-&gt;&gt;GT: Continuous Delivery\n    GT--xDR: Pushes\n    deactivate GT\n\n    D-&gt;&gt;GR: Creates a Pre-Release\n    activate GR\n    GR-&gt;&gt;GR: Continuous Deployment (Staging)\n    GR--xST: Deploys\n    deactivate GR\n\n    D-&gt;&gt;GR: Creates a Release\n    activate GR\n    GR-&gt;&gt;GR: Continuous Deployment (Production)\n    GR--xPRD: Deploys\n    deactivate GR</code></pre>"},{"location":"exercises/01.collaborate/","title":"Collaboration","text":"<p>Continuous Collaboration</p> <p>Continuous Collaboration enables working together across technical and cultural boundaries as a unified team to accomplish a goal through practices like ChatOps and technologies like MS Teams. Individuals and interactions over processes and tools; Working software over comprehensive documentation; Customer collaboration over contract negotiation; Responding to change over following a plan.</p>"},{"location":"exercises/01.collaborate/#objectives","title":"Objectives","text":"<p>Behaviors that enable addressing the challenge include</p> <ul> <li> Facilitate tracking of business goal delivery</li> <li> Enable rapid onboarding to project development</li> <li> Provide a standardized validation of work done</li> <li> Enable collaborative validation of done requirement</li> </ul>"},{"location":"exercises/01.collaborate/01/","title":"Project Management","text":"<p> Facilitate tracking of business goal delivery</p> <p>Our goal is to create a Tetris Game to delight our site visitors.</p> <ol> <li> <p>Refer back to the project created in the prerequisite to the workshop</p> </li> <li> <p>Create an issue to capture the goal</p> <ol> <li>Select the  Home view</li> <li>Click on the + button</li> <li>Select  Create new issue from the drop down</li> <li>Choose Feature request</li> <li>Fill the form as follows and click Create</li> </ol> <p></p> </li> </ol> <p>You may now update the issue with comments to keep collaborating stakeholders in the loop.</p>"},{"location":"exercises/01.collaborate/01/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Project planning for developers</li> </ul>"},{"location":"exercises/01.collaborate/02/","title":"Implement Features","text":"<p> Enable rapid onboarding to project development</p> <p>Our goal is to create a Tetris Game to delight our site visitors.</p> <p>However, navigating to the Tetris Game page of the site shows that the feature is currently missing. </p>"},{"location":"exercises/01.collaborate/02/#exercise-integrate-the-tetris-game","title":"Exercise: Integrate the Tetris Game","text":"<ol> <li>Refer back to the Codespaces development environment created in the prerequisite to the workshop.</li> <li>On the <code>TERMINAL</code> view at the bottom, notice that a local site server is already running.</li> <li> <p>Looking at the build log in the terminal, you can also see the following warning</p> <p></p> </li> <li> <p>On the <code>PORTS</code> view at the bottom, notice there is a <code>Site (8080)</code> entry in the table. You may right click on the entry to make the port public.</p> <p>This way other stakeholders can have live access to your ongoing work and can collaborate with timely feedbacks.</p> </li> <li> <p>Click the  icon associated with <code>Site (8080)</code> entry to view the site in your browser</p> </li> <li>Rename the <code>docs/.tetris.game</code> folder to <code>docs/tetris.game</code> without the <code>.</code> prefix</li> <li> <p>Find and open the file <code>mkdocs.yml</code> in the File Explorer (it's at the root of the file tree)</p> <ul> <li> <p>Fix the  the Tetris Game relevant entry and point the value of the entry to the <code>tetris.game</code> folder</p> <pre><code>nav:\n- index.md\n- Prerequisites: prerequisites.md\n- Exercises:\n    - Introduction: exercises/index.md\n    - Collaborate:\n        - exercises/01.collaborate/index.md\n        - exercises/01.collaborate/01.md\n        - exercises/01.collaborate/02.md\n        - exercises/01.collaborate/03.md\n    - Secure the Software Supply Chain:\n        - exercises/02.secure.the.software.supply.chain/index.md\n        - exercises/02.secure.the.software.supply.chain/00.md\n        - exercises/02.secure.the.software.supply.chain/01.md\n        - exercises/02.secure.the.software.supply.chain/02.md\n        - exercises/02.secure.the.software.supply.chain/02-extra.md\n    - Automate-Release:\n        - exercises/03.automate.release/index.md\n        - exercises/03.automate.release/01.md\n        - exercises/03.automate.release/02.md\n- Tetris Game: tetris.game/index.html #(1)\n</code></pre> <ol> <li>Here, change <code>.tetris.game/index.html</code> to <code>tetris.game/index.html</code>.</li> </ol> </li> </ul> </li> <li> <p>Observe the local build in the terminal and do a manual test of the integration</p> </li> <li> <p>Add automated checks by creating the following workflows</p> .github/workflows/1.1.continuous.integration.yml<pre><code>name: 1.1 Run Checks on PR\n\non:\n  pull_request:\n    branches:\n      - main\n  workflow_call: {}\n\npermissions:\n  actions: write\n  checks: write\n  contents: read\n  security-events: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  quality-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n          npm ci\n          npx playwright install --with-deps\n\n      - name: Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n\n      - name: Functional test\n        run: |\n          npx playwright test\n\n  security-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n          npm ci\n          npx playwright install --with-deps\n\n      - name: Dependency Review\n        uses: actions/dependency-review-action@v3\n        with:\n          config-file: &gt;-\n            ./.github/dependency-review-config.yml\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: python,javascript\n          setup-python-dependencies: \"false\"\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n</code></pre> .github/workflows/1.2.continuous.integration.yml<pre><code>name: 1.2 Run Checks on Merge Queue\n\non:\n  merge_group:\n    types: [checks_requested]\n  workflow_call: {}\n\npermissions:\n  actions: write\n  contents: read\n  security-events: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  run-acceptance:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n      - name: Install Python Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n      - name: Install NodeJS Dependencies\n        run: npm ci\n      - name: Test Site Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n      - name: Install Playwright Browsers\n        run: npx playwright install --with-deps\n      - name: Run UI Test\n        run: npx playwright test\n      - name: Upload UI Test Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n</code></pre> </li> <li> <p>Commit the changes to a new branch and push it</p> <pre><code>git checkout -b integrate-tetris-game\ngit add .\ngit commit -m \"Integrate tetris game\"\ngit push -u origin integrate-tetris-game\n</code></pre> </li> </ol>"},{"location":"exercises/01.collaborate/03/","title":"Validate Work Done","text":""},{"location":"exercises/01.collaborate/03/#local-validation","title":"Local validation","text":""},{"location":"exercises/01.collaborate/03/#standard-validation","title":"Standard validation","text":""},{"location":"exercises/01.collaborate/03/#continuous-integration","title":"Continuous Integration","text":"<pre><code>sequenceDiagram\n    participant GA as GitHub Actions\n\n    activate GA\n    GA--&gt;&gt;GA: Compile\n    GA--&gt;&gt;GA: Build\n    GA--&gt;&gt;GA: Unit Test\n    GA--&gt;&gt;GA: Integration Test\n    GA--&gt;&gt;GA: Code Scanning (CodeQL, Trivy)\n    GA--&gt;&gt;GA: Dependency Review\n    deactivate GA</code></pre>"},{"location":"exercises/01.collaborate/03/#step-1-create-integration-checks-and-tests","title":"Step 1: Create Integration Checks and Tests","text":"<p>The first step is to create a new integration check for the our app.</p> <ul> <li>Objective: Implement integration checks using GitHub Actions to ensure code quality (linter), unit test, and UI tests.</li> <li>Outcome: Gain familiarity with GitHub Actions and add integration checks.</li> </ul>"},{"location":"exercises/01.collaborate/03/#instructions","title":"Instructions","text":""},{"location":"exercises/01.collaborate/03/#add-code-quality-checks","title":"Add Code Quality Checks","text":"<ol> <li>Create a new branch with name <code>contiuous-integration-deployment</code> using the following commands<ul> <li><code>git branch contiuous-integration-deployment</code></li> <li><code>git checkout contiuous-integration-deployment</code></li> </ul> </li> <li>Navigate to <code>.github/workflows</code> and create a new file with the name <code>01.continuous.integration.yml</code>.</li> <li>Copy and paste the provided YAML code for running quality checks, UI tests, and security checks.</li> </ol> <p>```yaml       name: Run Checks</p> <pre><code>  on:\n    pull_request:\n      branches:\n        - main\n    workflow_call: {}\n\n  permissions:\n    actions: write\n    contents: read\n    checks: write\n\n  jobs:\n    quality-checks:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: actions/setup-python@v4\n          with:\n            python-version: 3.12\n        - uses: actions/setup-node@v3\n          with:\n            node-version: 20\n        - name: Install Python dependencies\n          run: |\n            python -m pip install --upgrade pip\n            pip install -r requirements.ci.txt\n        - name: Install NodeJS dependencies\n          run: npm ci\n        - name: Lint Python source\n          run: |\n            ruff check --format=github --select=E9,F63,F7,F82 --target-version=py311 .\n  ```\n</code></pre> <ol> <li>Save the file and commit it to your repository using the following commands<ul> <li>add the new files: <code>git add .</code></li> <li>commit the changes: <code>git commit -m \"add code quality checks\"</code></li> <li>push the changes to github: <code>git push --set-upstream origin contiuous-integration-deployment</code></li> </ul> </li> <li> <p>Go back to your github repo and create a pull request</p> - Create pull request - Compare &amp; pull request </li> </ol>"},{"location":"exercises/01.collaborate/03/#add-ui-tests","title":"Add UI Tests","text":"<ol> <li>Navigate to <code>.github/workflows</code> and open <code>01.continuous.integration.yml</code>.</li> <li> <p>Add the required <code>env</code> for the UI tests using the following code on top of <code>job</code>.</p> <pre><code>  env:\n    CI: true\n    SITE_DIR: site\n    TETRIS_APP_HOST: \"127.0.0.1\"\n    TETRIS_APP_PORT: \"8080\"\n    TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n</code></pre> </li> <li> <p>Add the UI tests step on the workflow using the following code.</p> <pre><code>  functional-tests:\n      runs-on: ubuntu-latest\n      steps:\n        - uses: actions/checkout@v3\n        - uses: actions/setup-python@v4\n          with:\n            python-version: 3.12\n        - uses: actions/setup-node@v3\n          with:\n            node-version: 20\n        - name: Install Python dependencies\n          run: |\n            python -m pip install --upgrade pip\n            pip install -r requirements.ci.txt\n        - name: Install node dependencies\n          run: npm ci\n        - name: Install Playwright Browsers\n          run: npx playwright install --with-deps\n        - name: Run Playwright tests\n          run: npx playwright test\n        - uses: actions/upload-artifact@v3\n          if: always()\n          with:\n            name: playwright-report\n            path: playwright-report/\n            retention-days: 30\n</code></pre> </li> <li> <p>Save the file and commit it to your repository using the following commands</p> <ul> <li>add the new files: <code>git add .</code></li> <li>commit the changes: <code>git commit -m \"add ui tests\"</code></li> <li>push the changes to github: <code>git push --set-upstream origin contiuous-integration-deployment</code></li> </ul> </li> <li> <p>Navgiate back to our pull request and click on the <code>checks</code> tab to see the status of our checks.</p> - Checks </li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/","title":"Secure the Software Supply Chain","text":""},{"location":"exercises/02.secure.the.software.supply.chain/#introduction","title":"Introduction","text":"<p>The goal of this lab is to create a software supply chain for the <code>Tetris</code> app. The software supply chain will consist of the following steps:</p> <ol> <li>Create Integration Checks</li> <li>Continuous Delivery</li> <li>Pre-Release</li> <li>Compliance</li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/#prerequisites","title":"Prerequisites","text":"<p>The same prerequisites as Lab 1 apply.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/#objectives","title":"Objectives","text":"<p>The objectives of this lab are to:</p> <ol> <li>Create Integration Checks for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a Continuous Delivery workflow for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a new pre-release <code>tag</code> for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a Compliance using CodeQL, Dependcy Review, and Dependabot.</li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/#lab-outcomes","title":"Lab Outcomes","text":"<p>The outcomes of this lab are:</p> <ol> <li>Get familiar with GitHub Actions.</li> <li>Get familiar with GitHub Packages.</li> <li>Get familiar with the GitHub CodeQL analysis.</li> <li>Get familiar with the GitHub Dependency Review Action.</li> <li>Get familiar with the GitHub Dependabot.</li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/#lab-content","title":"Lab Content","text":"<ol> <li>Create and Enable Security Checks</li> <li>Create pre-relase Tag</li> <li>Create Pre-Release</li> <li>Containerize the application</li> <li>Create Release</li> <li>Merge Pull Request</li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/00/","title":"Security Checks","text":"<p>In this part we will add to the continuous integration workflow the security checks.</p> <ul> <li>Objective: Add security checks to the continuous integration workflow.</li> <li>Estimated completion time: 10 minutes</li> <li>Outcome: The continuous integration workflow will run the security checks on the Pull Request</li> </ul> <p>Note</p> <p>We will continue working on the same branch <code>contiuous-integration-deployment</code> and the same file <code>01.1.continuous.integration.yml</code>.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/00/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> <li>GitHub Actions - Workflow syntax for GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/00/#lab","title":"Lab","text":""},{"location":"exercises/02.secure.the.software.supply.chain/00/#step-1-enable-enable-ghas-github-advanced-security-checks-on-github-repository","title":"Step 1. Enable Enable GHAS (GitHub Advanced Security) checks on GitHub Repository","text":"<p>Note</p> <p>You must have admin permissions on the repository to perform this step.</p> <ol> <li>Navigate to the repository settings.</li> <li> <p>Select the tab <code>Security &amp; analysis</code>.</p> <p></p> </li> <li> <p>Enable <code>Dependabot</code></p> </li> <li> <p>Click on the button Enable <code>Dependabot alerts</code>.</p> </li> <li> <p>Click on the button Enable <code>Dependabot security updates</code>.</p> <p></p> </li> <li> <p>Enable <code>Code scanning</code>.</p> </li> <li> <p>Click on the button Set up for <code>CodeQL analysis</code> and select Default.</p> <p></p> </li> <li> <p>Enable <code>Secret scanning</code>.</p> </li> <li> <p>Click on the button Enable for <code>Secret scanning</code>.</p> <p></p> </li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/00/#step-2-add-security-checks-to-the-continuous-integration-workflow","title":"Step 2. Add security checks to the continuous integration workflow","text":"<ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>01.1.continuous.integration.yml</code>.</li> <li>Add the following content to the file on line <code>68</code>:</li> </ol> <p>Security Checks</p> <pre><code>  security-checks:\n  runs-on: ubuntu-latest\n  steps:\n  - uses: actions/checkout@v3\n  - uses: actions/setup-python@v4\n    with:\n      python-version: 3.12\n  - uses: actions/setup-node@v3\n    with:\n      node-version: 20\n  - name: Install Python dependencies\n    run: |\n      python -m pip install --upgrade pip\n      pip install -r requirements.txt\n  - name: Install node dependencies\n    run: npm ci\n  - name: Dependency Review\n    uses: actions/dependency-review-action@v3\n    with:\n      config-file: ./.github/dependency-review-config.yml\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre> <p>Nagivate to the repository on GitHub and open the pull request.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/01/","title":"Continues Deployment","text":"<p>In this part we will get our application ready for deployment and deploy it to GitHub Pages.</p> <ul> <li>Objectives: Create a new pre-release version (tag) of the application when our main branch is updated.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: A new pre-release version of the application is created when the main branch is updated.</li> </ul> <p>Note</p> <p>This step will not be run until we merge the pull request first</p> <pre><code>\nsequenceDiagram\n    participant GA as GitHub Actions\n\n    activate GA\n    GA--&gt;&gt;GA: Create a tag\n    GA--&gt;&gt;GA: Update version number\n    deactivate GA\n</code></pre> <pre><code>\nsequenceDiagram\n    participant GA as GitHub Actions\n\n    activate GA\n    GA--&gt;&gt;GA: Build artifacts\n    GA--&gt;&gt;GA: Store artifacts\n    deactivate GA\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>The prerequisites are the same as in the previous part.</p> <ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#resources","title":"Resources","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> <li>GitHub Actions - Workflow syntax for GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#lab","title":"Lab","text":""},{"location":"exercises/02.secure.the.software.supply.chain/01/#1-create-a-github-action-to-build-and-publish-the-application","title":"1. Create a GitHub Action to build and publish the application","text":"<p>Note</p> <p>We will keep working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#step-1-get-the-last-version-number","title":"Step 1: Get the last version number","text":"<ol> <li>Navgiate to <code>.github/workflows</code> and create a new file called <code>02.1.continuous.delivery.yml</code>.</li> <li>Add the following content to the file:</li> </ol> <p>Get Version Number</p> <pre><code>  name: Version Changes to the Main Branch\n    on:\n      push:\n        branches:\n          - main\n    jobs:\n      ger-version-number:\n        runs-on: ubuntu-latest\n        steps:\n        - name: Checkout\n          uses: actions/checkout@v3\n          with:\n            fetch-depth: 0\n        - name: Get last version number\n          id: get_last_version\n          run: |\n            # Retrieve the last git tag, as we will only be processing one delivery line.\n            last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n            echo \"Last version is $last_version\"\n            echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#step-2-get-next-version-number","title":"Step 2: Get next version number","text":"<ol> <li>Navgiate to <code>.github/workflows</code> and open <code>02.1.continuous.delivery.yml</code>.</li> <li>On line <code>24</code> add the following content:</li> </ol> <p>Get Next Version Number</p> <pre><code>  - name: Get next version number\n    id: get_next_version\n    run: |\n      # Retrieve the last git tag, as we will only be processing one delivery line.\n      last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n      echo \"Last version is $last_version\"\n      # Split the version into its components\n      a=( ${last_version//./ } )\n      # If the last component is 9, then increment the middle component and reset the last component to 0\n      if [[ ${a[2]} == 9 ]]; then\n          next_version=\"${a[0]}.$((${a[1]}+1)).0\"\n      else\n          # Otherwise increment the last component\n          next_version=\"${a[0]}.${a[1]}.$((${a[2]}+1))\"\n      fi\n      echo \"Next version is $next_version\"\n      echo \"next_version=$next_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#step-3-create-tag-for-the-next-version-for-pre-release","title":"Step 3: Create tag for the next version for pre-release","text":"<ol> <li>Navgiate to <code>.github/workflows</code> and open <code>02.1.continuous.delivery.yml</code>.</li> <li>Add the following content to the file after line <code>38</code>:</li> </ol> <p>Create pre-release tag</p> <pre><code>- name: Create tag for the next version\n  run: |\n    git config --global user.name \"${GITHUB_ACTOR}\"\n    git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n    git tag -a \"$next_version\" -m \"Version $next_version\"\n    git push origin \"$next_version\"\n  env:\n    next_version: ${{ steps.get_next_version.outputs.next_version }}-pre-release\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#complete-example","title":"Complete Example","text":"Full Workflow File <pre><code>name: Version Changes to the Main Branch\non:\n  push:\n    branches:\n      - main\njobs:\n  version-main-branch-changes:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v3\n      with:\n        fetch-depth: 0\n    - name: Get last version number\n      id: get_last_version\n      run: |\n        # Retrieve the last git tag, as we will only be processing one delivery line.\n        last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n        echo \"Last version is $last_version\"\n        echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n    - name: Get next version number\n      id: get_next_version\n      run: |\n        major=$(echo $last_version | cut -d. -f1)\n        minor=$(echo $last_version | cut -d. -f2)\n        patch=$(echo $last_version | cut -d. -f3)\n        next_patch=$((patch+1))\n        next_version=\"$major.$minor.$next_patch\"\n        echo \"Next version is $next_version\"\n        echo \"next_version=$next_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n      env:\n        last_version: ${{ steps.get_last_version.outputs.last_version }}\n    - name: Create tag for the next version\n      run: |\n        git config --global user.name \"${GITHUB_ACTOR}\"\n        git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n        git tag -a \"$next_version\" -m \"Version $next_version\"\n        git push origin \"$next_version\"\n      env:\n        next_version: ${{ steps.get_next_version.outputs.next_version }}-pre-release\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/02-extra/","title":"Extra: Packing The Application","text":"<p>In this step we will containerize the application using Docker and push to GitHub Container Registry.</p> <ul> <li>Objective: Containerize the application using Docker and push to GitHub Container Registry.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: The application will be containerized and pushed to GitHub Container Registry.</li> </ul> <p>Note</p> <p>We will continue working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/02-extra/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Container Registry</li> <li>GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02-extra/#resources","title":"Resources","text":"<ul> <li>Docker</li> <li>GitHub Container Registry</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02-extra/#lab","title":"Lab","text":"<ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>03.extra.container.image.packaging.yml</code>.</li> <li>Add the following content to the file:</li> </ol> <p>Package Delivery Artifacts</p> <pre><code>name: Package Container Image\non:\n  pull_request:\n    branches:\n    - main\npremissons:\n  contents: read\n  packages: write\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    # Connect to GitHub Container Registry (ghcr)\n    - name: Login to GitHub Container Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ghcr.io\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n    - name: Build and push to GHCR\n      uses: docker/build-push-action@v2\n      with:\n        push: true\n        context: ${{ github.workspace }}\n        tags: ghcr.io/${{ github.repository }}:${{ github.sha }}\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre> <ul> <li>Navigate to the repository on GitHub and open a pull request.</li> <li> <p>After the workflow is finished, navigate to the GitHub Container Registry and verify that the container image was pushed successfully.</p> <p></p> </li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02/","title":"Build and Upload Application Artifact","text":"<p>In this step we will build the application and upload the artifact to GitHub Packages once the pre-relase tag is created on step Create Tag Step.</p> <ul> <li>Objective: Build the application and upload the artifact to GitHub Packages.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: The application will be built and uploaded to GitHub Packages.</li> </ul> <p>Note</p> <p>We will continue working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Packages</li> <li>GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#resources","title":"Resources","text":"<ul> <li>GitHub Packages</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#lab","title":"Lab","text":"<p>Note</p> <p>This step requires the previous step Create Tag Step to be completed first and the pre-realse tag is created and merging the pull request to main branch on step Merge Pull Request Step.</p> <ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>02.2.continuous.delivery.yml</code>.</li> <li>Add the following content to the file:</li> </ol> <p>Package Delivery Artifacts</p> <pre><code>  name: Package Delivery Artifacts\n  on:\n    push:\n      tags:\n        - \"*pre-release*\"\n  permissions:\n    contents: read\n    packages: write\n    pages: write\n  env:\n    CI: true\n    SITE_DIR: _site\n  jobs:\n    package-delivery:\n      runs-on: ubuntu-latest\n      steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Setup GitHub Pages\n        uses: actions/configure-pages@v3\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n        enablement: \"true\"\n      - name: Build Site\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n      - name: Create Pre-Release\n        uses: softprops/action-gh-release@v1\n        with:\n          files: ${{ env.SITE_DIR }}\n          prerelease: true\n          generate_release_notes: true\n          fail_on_unmatched_files: true\n          discussion_category_name: Announcements\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre>"},{"location":"exercises/03.automate.release/","title":"Release Automation","text":"<p> Enable rapid onboarding to project development</p> <ol> <li> <p>Continuing on the existing <code>git</code> branch, implement the release automation workflow</p> .github/workflows/3.continuous.deployment.yml<pre><code>name: 3. Deploy Release\n\non:\n  release:\n    types:\n      - released\n  workflow_dispatch: {}\n\nconcurrency:\n  group: github-pages\n  cancel-in-progress: false\n\npermissions:\n  contents: write\n  deployments: write\n  pages: write\n  id-token: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v3\n\n      - name: Download release asset\n        id: download-release-asset\n        run: |\n          cat &lt;&lt; 'EOF' &gt; event.json\n          ${{ toJson(github.event) }}\n          EOF\n          asset_id=$(cat event.json | jq '.release.assets[] | select(.name == \"${{ env.SITE_DIR }}.zip\") | .id')\n\n          curl --location --output '${{ env.SITE_DIR }}.zip'                          \\\n            -H \"Accept: application/octet-stream\"                                     \\\n            -H \"Authorization: Bearer ${{ steps.generate-app-token.outputs.token }}\"  \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\"                                     \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases/assets/${asset_id}\"\n\n          unzip -o \"${{ env.SITE_DIR }}.zip\" -d .\n\n          echo '##### Debug'\n          ls -al \"${{ env.SITE_DIR }}\"\n\n      - name: Fix site file permissions\n        run: |\n          chmod -c -R +rX \"${{ env.SITE_DIR }}/\" | while read line; do\n            echo \"::warning title=Invalid file permissions automatically fixed::$line\"\n          done\n\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: \"${{ env.SITE_DIR }}\"\n          retention-days: \"2\"\n\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n        with:\n          token: ${{ steps.generate-app-token.outputs.token }}\n</code></pre> </li> <li> <p>Commit the changes to a new branch and push it</p> <pre><code>git add .\ngit commit -m \"Implement release automation\"\ngit push -u origin integrate-tetris-game\n</code></pre> </li> </ol>"},{"location":"exercises/03.automate.release/01/","title":"Deploye the application to GitHub Pages","text":"<p>In this step once we clarify the application is ready to be deployed to pre-relase we will create a new release deployment.</p> <ul> <li>Objective: Create a new release deployment.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: A production release will be created.</li> </ul> <p>Note</p> <p>We will continue working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"exercises/03.automate.release/01/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> </ul>"},{"location":"exercises/03.automate.release/01/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> </ul>"},{"location":"exercises/03.automate.release/01/#lab","title":"Lab","text":"<p>Note</p> <p>This step requires the previous step Create pre-release Step to be completed first and the pre-realse tag is created and merging the pull request to main branch on step Merge Pull Request Step.</p> <ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>03.continuous.deployment.yml</code>.</li> <li>Add the following content to the file:</li> </ol> <p>Deploy Release</p> <pre><code>name: Deploy Release\non:\n  release:\n    types:\n    - released\nconcurrency:\n  group: production-deployment\n  cancel-in-progress: false\npremissons:\n  packages: none\n  contents: write\n  issues: write\n  deployments: write\nenv:\n  CI: true\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    url: ${{ steps.deploy.outputs.site-url }}\n    steps:\n    - name: Download release\n      run: |\n        curl -o assets.zip ${{ github.event.release.assets_url }}\n        # unarchive asset\n    - name: Deploy\n      run: |\n        # do git configs\n        git push origin HEAD:gh-pages\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n      with:\n        node-version: 20\n    - name: Install NodeJS dependencies\n      run: npm ci\n    - name: Install Playwright Browsers\n      run: npx playwright install --with-deps\n    - name: Run post-deployment UI test\n      run: |\n        npx playwright test\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-integration-deployment\n</code></pre>"},{"location":"exercises/03.automate.release/01/#recap","title":"Recap","text":"<p>In this module we have created:</p> <ol> <li>Enable Security Features and checks on Step.</li> <li>Create a new pre-release tag on Step.</li> <li>Build and Upload Application Artifact on Step.</li> <li>Container Image Packaging on Step.</li> <li>Create a new release deployment on Step.</li> </ol> <p>Now let's move to our final step by merging the pull request to main branch on Step and test all of the steps above.</p>"},{"location":"exercises/03.automate.release/02/","title":"Deploy Release","text":""},{"location":"exercises/03.automate.release/02/#recap","title":"Recap","text":"<pre><code>flowchart TD\n    subgraph Checks\n        A[Code Linting]\n        B[UI Testing]\n        D[Security Scanning]\n        C[Workflow Failure]\n    end\n\n    A--&gt;|Pass|B\n    A--&gt;|Fail|C\n    B--&gt;|Pass|D\n    B--&gt;|Fail|C\n\n    subgraph Release Process\n        E[Create Pre-Release Tag]\n        F[Create Pre-Release]\n        G{Validate}\n        H[Create Release]\n        I[Deployment]\n        J[Failure Workflow]\n\n    end\n\n    D--&gt;|Pass|K\n    D--&gt;|Fail|C\n    E--&gt;|Success|F\n    F--&gt;|Success|G\n    F--&gt;|Fali|J\n    G--&gt;|Valid|H\n    G--&gt;|Invalid|J\n    H--&gt;|Pass|I\n    H--&gt;|Fail|J\n    E--&gt;|Fail|J\n\n    subgraph Main Branch\n        K[Push to Main Branch]\n    end\n\n    K--&gt;|Success|E\n</code></pre>"},{"location":"exercises/03.automate.release/02/#instructions","title":"Instructions","text":"<p>In this step will merge our pull request to run the workflows we have created on the previous steps.</p> <ol> <li>Navgiate to the repository on GitHub and open the pull request.</li> <li>Click on the button <code>Merge pull request</code> and select <code>Confirm merge</code>.</li> <li>Navigate to the <code>Actions</code> tab and verify the workflows are running.</li> <li>Check the tag was created on the repository.</li> <li>Check the pre-release was created on the repository.</li> <li>Check the release was created on the repository.</li> </ol>"}]}