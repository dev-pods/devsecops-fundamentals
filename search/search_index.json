{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#github-devsecops-fundamentals-workshop-github-universe-2023","title":"GitHub DevSecOps Fundamentals | Workshop, GitHub Universe 2023","text":"<p>This self-paced workshop will enable you acquire the capabilities to implement a DevSecOps mindset, leveraging the GitHub platform for a seamless developer experience.</p> <p></p> GitHub Platform <p>  Complete the  Prerequisites checklist!</p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<ul> <li> Collaborate effectively for high-velocity productivity</li> <li> Apply preventive security to every aspect of the development process</li> <li> Implement a secure software supply chain</li> <li> Automate product release and business processes in general</li> <li> Remove complications due to tool-bloat</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Secure at every step</li> <li>Start coding instantly with Codespaces</li> <li>Create diagrams to convey information through charts and graphs</li> <li>Include diagrams in your Markdown files with Mermaid</li> <li>Security hardening for GitHub Actions</li> <li>Security harden deployments with OpenID Connect</li> </ul>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>To ensure a seamless workshop experience, complete the following checklist items in order.</p> <p>Prepare before the workshop</p> <ol> <li>"},{"location":"prerequisites/#set-up-a-github-account","title":"Set up a GitHub account","text":"<p>Login to your GitHub account.</p> <p>You may create a new GitHub account, if you do not already have one. (1)</p> <ol> <li> Clicking the button below will open the page on a new tab, for you to create a new GitHub account. Keep your <code>@handle</code> handy after you have logged in.</li> </ol> <p> Create a new GitHub account </p>"},{"location":"prerequisites/#clone-the-workshop-project-to-your-own-account","title":"Clone the workshop project to your own account","text":"<ol> <li> Create workshop project</li> <li> <p>In the new tab, most of the prompts will automatically fill in for you.</p> <ul> <li>For owner, choose your personal account.</li> <li> <p>We recommend creating a public repository. (1)</p> <ol> <li> <p> Public repositories benefit from</p> <ul> <li>Free use of GitHub Actions minutes.</li> <li>Free use of GitHub Advanced Security features.</li> </ul> </li> </ol> </li> <li> <p>Scroll down and click the Create repository button at the bottom of the form.</p> Sample screenshot <p></p> </li> </ul> </li> <li> <p>After your new repository is created, wait about 20 seconds, then refresh the page. </p> </li> </ol>"},{"location":"prerequisites/#enable-discussions","title":"Enable Discussions","text":"<p> Enabling GitHub Discussions on your repository </p>"},{"location":"prerequisites/#configure-base-security","title":"Configure base security","text":"<ol> <li>Navigate to the  Settings tab on your new workshop repository.</li> <li> <p>Under the Security section of the menu, select  Code security and analysis. Then configure the settings to match as follows (by clicking Enable where the option is/becomes available).</p> Sample screenshot <p></p> </li> </ol>"},{"location":"prerequisites/#create-a-github-app","title":"Create a GitHub App","text":"<ol> <li> <p>Goto to the profile menu at the top-right corner</p> <ul> <li>  Settings</li> <li>  Developer settings<ul> <li>  GitHub Apps<ul> <li> New GitHub App</li> </ul> </li> </ul> </li> </ul> Provide the form fields value as demonstrated here <p> </p> <p>On Repository permissions, select <code>Read and write</code> for the <code>Contents</code> scope.</p> <ul> <li>Generate a private key for the new GitHub App as documented in  here.</li> <li>Goto <code>https://github.com/apps/&lt;YOUR-HANDLE&gt;-pusher-bot</code>. Install the app in the repository you created earlier.</li> <li> <p>Save the GitHub App private key to your new repository's secrets under the name of <code>APP_PRIVATE_KEY_ACTIONS_ASSISTANT</code>.</p> <p>\ud83d\udc40 Creating secrets for a repository.</p> </li> <li> <p>Save the GitHub App's <code>appid</code> to your new repository's variables under the name of <code>APP_ID_ACTIONS_ASSISTANT</code>.</p> <p>\ud83d\udc40 Creating configuration variables for a repository</p> </li> </ul> <p>What is the use of a GitHub App?</p> <p>When you use the repository's <code>GITHUB_TOKEN</code> to perform tasks, events triggered by the <code>GITHUB_TOKEN</code>, with the exception of <code>workflow_dispatch</code> and <code>repository_dispatch</code>, will not create a new workflow run. This prevents you from accidentally creating recursive workflow runs. For example, if a workflow run pushes code using the repository's <code>GITHUB_TOKEN</code>, a new workflow will not run even when the repository contains a workflow configured to run when push events occur.</p> <p>If you do want to trigger a workflow from within a workflow run, you can use a GitHub App installation access token or a personal access token instead of <code>GITHUB_TOKEN</code> to trigger events that require a token.</p> <p>If you use a GitHub App, you'll need to create a GitHub App and store the app ID and private key as secrets.</p> <p>~ Triggering a workflow from a workflow</p> <p>During the course of the workshop exercises, you will discover how the GitHub App is used to trigger the automatic deployment of release artifacts.</p> </li> </ol>"},{"location":"prerequisites/#create-a-project-board-for-the-repository","title":"Create a project board for the repository","text":"<ol> <li> <p>Open the recently created workshop repository in a new tab.</p> </li> <li> <p>Navigate to the  Projects tab on your new workshop repository.</p> </li> <li> <p>Open the  Link a project  dropdown menu. Then select the New Project option.</p> Sample screenshot <p></p> </li> <li> <p>Click on the  New project  button to start the project creation wizard.</p> </li> <li>Select the  Team backlog template.</li> <li>Give a name to the project </li> <li> <p>Finally click on the Create button.</p> Sample screenshot <p></p> </li> </ol>"},{"location":"prerequisites/#provision-a-new-cloud-development-environment-for-the-workshop","title":"Provision a new cloud development environment for the workshop","text":"<p>GitHub Codespaces enables you to instantly start coding on the workshop project. Personal accounts on GitHub can benefit from a free quota of GitHub Codespaces usage.</p> <ol> <li> <p>Navigate to the  Code tab.</p> </li> <li> <p>Open the  Code  menu and click on  Create codespaces on main.</p> Sample screenshot <p></p> </li> <li> <p>Leave the development environment to initialize and run, we will come back to use it later.</p> </li> </ol>"},{"location":"exercises/","title":"Introduction","text":""},{"location":"exercises/#introduction","title":"Introduction","text":"<p> Workshop Exercises</p> <p>The workshop exercises provide guidance for implementing DevSecOps at the fundamental level with the GitHub platform. On completion, you would have gained the exposure to enable you seamlessly implement DevSecOps capabilities such as</p> <ul> <li> Continuous collaboration</li> <li> Continuous planning</li> <li> Continuous integration</li> <li> Continuous delivery</li> <li> Continuous quality</li> <li> Continuous security</li> </ul> <p>This workshop site also serves as the product we shall target for development. And During the course of the exercises, you will discover how you can rapidly build and test the site locally, and implement standardized tests to enable automated quality checks on the site.</p>  Workshop Scenario Milestones Process Outcome <p>You are working in a team that owns this site, and a new business goal has come into the vision of your organisation. In order to grow engagement with the site...</p> <p>...the goal is to create a Tetris Game to delight our site visitors.</p> <p> Outcome: Tetris Game </p> <p>The workshop objectives will be delivered by completion of the following milestones</p> <p></p> <ul> <li> <p> Collaborate</p> <p>Facilitate onboarding into the site project and enable project development at high velocity for stakeholders of different experience with the project.</p> </li> <li> <p> Secure the software supply chain</p> <p>Seamlessly implement application security and secure the software supply chain.</p> </li> <li> <p> Automate Deployment of Releases</p> <p>Reliably deliver value to the end-user at high velocity.</p> </li> </ul> <p>High Level Continuous Deployment Architecture</p> <pre><code>\nsequenceDiagram\n    actor D as Developer\n    actor R as Reviewers\n\n    participant GBF as Git Branch (Feature) &amp; PR\n    participant GMQ as GitHub Merge Queue\n    participant GBM as Git Branch (Main)\n\n    participant GT as Git Tag\n    participant DR as GitHub Docker Registry\n    participant GR as GitHub Release\n    participant ST as Staging\n    participant PRD as Production\n\n    D-&gt;&gt;GBF: Pushes &amp; opens\n    activate GBF\n    GBF-&gt;&gt;GBF: Continuous Integration\n    deactivate GBF\n\n    GBF--)+R: Notify changes\n    R-&gt;&gt;-GBF: Approves\n    GBF--)GMQ: Creates/Updates\n\n    activate GMQ\n    GMQ-&gt;&gt;GMQ: Continuous Integration\n    deactivate GMQ\n\n    GMQ-&gt;&gt;GBM: Merges\n    activate GBM\n    GBM-&gt;&gt;GBM: Versioning\n    GBM-&gt;&gt;GT: Creates\n    deactivate GBM\n\n\n    activate GT\n    GT-&gt;&gt;GT: Continuous Delivery\n    GT--xDR: Pushes\n    deactivate GT\n\n    D-&gt;&gt;GR: Creates a Release\n    activate GR\n    GR-&gt;&gt;GR: Continuous Deployment (Staging)\n    GR--xST: Deploys\n    deactivate GR\n\n    D-&gt;&gt;GR: Creates a Release\n    activate GR\n    GR-&gt;&gt;GR: Continuous Deployment (Production)\n    GR--xPRD: Deploys\n    deactivate GR</code></pre>"},{"location":"exercises/01.collaborate/","title":"Collaborate","text":"<p>Continuous Collaboration</p> <p>Continuous collaboration enables working together across technical and cultural boundaries as a unified team, reducing frictions and increasing the velocity to accomplish common goals.</p>"},{"location":"exercises/01.collaborate/#objectives","title":"Objectives","text":"<p>Behaviors that enable addressing the challenge include</p> <ul> <li> Facilitate tracking of business goal delivery</li> <li> Enable rapid onboarding to project development</li> <li> Provide a standardized validation of work done</li> <li> Enable collaborative validation of done requirement</li> </ul>"},{"location":"exercises/01.collaborate/01/","title":"Project Management","text":"<p> Facilitate tracking of business goal delivery</p> <p>Our goal is to create a Tetris Game to delight our site visitors, with stakeholders in the loop through the full course of the development process.</p> <ol> <li> <p>Refer back to the project created in the prerequisite to the workshop</p> </li> <li> <p>Create an issue (1) to capture the goal</p> <ol> <li>\ud83d\udc40 See Project planning for developers</li> </ol> <ol> <li>Select the  Backlog view</li> <li>Click on the + Add item</li> <li>Click on the + button</li> <li>Select  Create new issue from the menu</li> <li>Choose the repository you created earlier</li> <li> <p>Choose Feature request (1)</p> <ol> <li> <p>The issue creation was facilitated with an \ud83d\udc40 issue template.</p> .github/ISSUE_TEMPLATE/feature_request.md<pre><code>---\nname: Feature request\nabout: Suggest an idea for this project\ntitle: ''\nlabels: ''\nassignees: ''\n\n---\n\n**Is your feature request related to a problem? Please describe.**\nA clear and concise description of what the problem is. Ex. I'm always frustrated when [...]\n\n**Describe the solution you'd like**\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\nAdd any other context or screenshots about the feature request here.\n</code></pre> </li> </ol> </li> <li> <p>Fill the form as follows or feel free to be creative \ud83d\ude42 with your inputs.</p> <p>After filling the form, click Create  to create the issue. (1)</p> <ol> <li>Things you can do in an issue include but are not limited to<ul> <li>Assign the issue to yourself or other stakeholders.</li> <li>Mention other stakeholders (people and teams) to notify them for awareness.</li> </ul> </li> </ol> </li> </ol> <p></p> </li> </ol> <p>You may now update the issue with comments to keep collaborating stakeholders in the loop.</p>"},{"location":"exercises/01.collaborate/01/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>Project planning for developers</li> <li>Planning and tracking work for your team or project</li> </ul>"},{"location":"exercises/01.collaborate/02/","title":"Implement Features","text":"<p> Enable rapid onboarding to project development</p> <p>Our goal is to create a Tetris Game to delight our site visitors, without losing time to complex project onboarding process nor complications due to tool-bloat.</p> <p>Currently, navigating to the Tetris Game page of the workshop site shows that the feature is currently missing. We will address that issue in this exercise.</p> <p></p>"},{"location":"exercises/01.collaborate/02/#exercise-integrate-the-tetris-game","title":"Exercise: Integrate the Tetris Game","text":"<p>Refer back to the Codespaces development environment created in the prerequisite to the workshop.(1)</p> <ol> <li> <p> Your Codespace may have stopped due to inactivity.</p> <ul> <li>If the browser tab with your Codespace remains open and you can find it, click Restart codespace to resume.   </li> <li>Otherwise, you can find it at the new repository you had created.   </li> </ul> </li> </ol>"},{"location":"exercises/01.collaborate/02/#explore","title":"Explore","text":"<ol> <li> <p>On the <code>TERMINAL</code> view at the bottom, notice that a local site server is already running.</p> <p>Looking at the build log in the terminal, you can see a warning like the one in the following example.(1)</p> <ol> <li>\ud83d\udca1 The warning gives a cue to addressing the Tetris Game integration issue. We shall implement the fix in later steps!</li> </ol> <p></p> <p> The log <code>INFO</code> entry that reads <code>INFO    -  [05:36:30] Watching paths for changes: 'docs', 'mkdocs.yml'</code> informs you that the local site will rebuild whenever there is a change in the <code>docs</code> folder.</p> </li> </ol>"},{"location":"exercises/01.collaborate/02/#develop-locally","title":"Develop locally","text":"<ol> <li> <p>Switch to the <code>PORTS</code> view at the bottom panel, notice there is a <code>Site (8080)</code> entry in the table.</p> <ol> <li>Focus your  mouse pointer on the <code>Site (8080)</code> to reveal additional contexts.</li> <li> <p>Click the  Preview in Editor icon to browse the local build of the site inside of the editor's browser.(1)</p> <ol> <li> <ul> <li> Only you currently have access to the published site.</li> <li> You may instead click the  icon associated with <code>Site (8080)</code> entry to view the site in your normal browser.</li> </ul> </li> </ol> <p>To open access to other stakeholder</p> <ol> <li>Right click on the <code>Site (8080)</code> entry</li> <li>In the popup menu, set the mouse pointer on the Port Visibility item and select the Public option.     </li> </ol> <p> Facilitate Collaboration</p> <p>Now, other stakeholders you share the site URL with can access the site. Consequently, they can also assess your ongoing work and can collaborate with timely feedbacks.</p> </li> </ol> </li> <li> <p>Rename the <code>docs/.tetris.game</code> folder to <code>docs/tetris.game</code>, i.e. simply remove the <code>.</code> prefix from the name.</p> </li> <li> <p>Find and open the file <code>mkdocs.yml</code> in the File Explorer (it's at the root of the file tree)</p> <ul> <li> <p>Fix the the <code>Tetris Game</code> relevant entry and point the value of the entry to the <code>tetris.game</code> folder</p> <pre><code>nav:\n- index.md\n- Prerequisites: prerequisites.md\n- Exercises:\n    - Introduction: exercises/index.md\n    - Collaborate:\n        - exercises/01.collaborate/index.md\n        - exercises/01.collaborate/01.md\n        - exercises/01.collaborate/02.md\n        - exercises/01.collaborate/03.md\n    - Secure the Software Supply Chain:\n        - exercises/02.secure.the.software.supply.chain/index.md\n        - exercises/02.secure.the.software.supply.chain/00.md\n        - exercises/02.secure.the.software.supply.chain/01.md\n        - exercises/02.secure.the.software.supply.chain/02.md\n        - exercises/02.secure.the.software.supply.chain/02-extra.md\n    - Automate-Release:\n        - exercises/03.automate.release/index.md\n        - exercises/03.automate.release/01.md\n- Tetris Game: tetris.game/index.html #(1)\n</code></pre> <ol> <li>Here, change <code>.tetris.game/index.html</code> to <code>tetris.game/index.html</code>.</li> </ol> </li> </ul> </li> </ol>"},{"location":"exercises/01.collaborate/02/#test","title":"Test","text":""},{"location":"exercises/01.collaborate/02/#manual-test","title":"Manual Test","text":"<ol> <li>Observe the local build in the terminal, there should not be any  <code>WARNING</code> in the log.</li> <li>Manually confirm that the Tetris Game integration was effective.    </li> </ol>"},{"location":"exercises/01.collaborate/02/#automated-test","title":"Automated Test","text":"<ol> <li> <p>Implement a standardized automated functional test to enable quality checks in the team at high velocity.</p> <p>Open the terminal and install test dependencies.(1)</p> <ol> <li>\ud83d\udca1 You can create additional terminal session by clicking  at the top right side of the <code>TERMINAL</code> panel.</li> </ol> <p><pre><code>nvm install --lts #(1)\nnpm install\nnpx playwright install --with-deps chromium #(2)\n</code></pre></p> <ol> <li> A codespace environment can be customized as needed. In this case, we customized the running session by installing the latest version of NodeJS.</li> <li> This command installs browsers required for the functional test. Please be patient, it may take 1 to 2 minutes to complete the installation.</li> </ol> <p>Then implement the functional test as follows.</p> tests/tetris.spec.js<pre><code>import { test, expect } from \"@playwright/test\";\n\ntest(\"Tetris Game\", async ({ page }) =&gt; {\n  const { TETRIS_APP_HOST, TETRIS_APP_PORT, TETRIS_APP_PATH } = process.env;\n\n  // should be similar to http://127.0.0.1:8080/github-devsecops-fundamentals/\n  console.log(\n    `http://${TETRIS_APP_HOST}:${TETRIS_APP_PORT}/${TETRIS_APP_PATH}`\n  );\n  await page.goto(\n    `http://${TETRIS_APP_HOST}:${TETRIS_APP_PORT}/${TETRIS_APP_PATH}`\n  );\n\n  await page.getByRole(\"link\", { name: \"Tetris Game\" }).click();\n  await expect(page.getByText(\"score 00000\")).toBeVisible();\n  await expect(page.getByText(\"rows 0\")).toBeVisible();\n  await expect(page.locator(\"#upcoming\")).toBeVisible();\n  await expect(\n    page.getByRole(\"link\", { name: \"Press Space to Play.\" })\n  ).toBeVisible();\n\n  await page.getByRole(\"link\", { name: \"Press Space to Play.\" }).click();\n  await expect(page.getByText(\"score 00000\")).not.toBeVisible({\n    timeout: 0.5 * 60 * 1000,\n  });\n});\n</code></pre> <p>Finally execute the automated test.</p> <pre><code>npx playwright test\n</code></pre> <p>When everything has been done right, the test should pass. </p> </li> <li> <p>Add automated checks by creating the following workflows</p> <pre><code>sequenceDiagram\n    participant GA as GitHub Actions\n\n    activate GA\n    GA--&gt;&gt;GA: Compile\n    GA--&gt;&gt;GA: Build\n    GA--&gt;&gt;GA: Unit Test\n    GA--&gt;&gt;GA: Integration Test\n    GA--&gt;&gt;GA: Code Scanning (CodeQL, Trivy)\n    GA--&gt;&gt;GA: Dependency Review\n    deactivate GA</code></pre> .github/workflows/1.1.continuous.integration.yml<pre><code>name: 1.1 Run Checks on PR\n\non:\n  pull_request:\n    branches:\n      - main\n  workflow_call: {}\n\npermissions:\n  actions: write\n  checks: write\n  contents: read\n  security-events: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  quality-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n          npm ci\n          npx playwright install --with-deps chromium\n\n      - name: Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n\n      - name: Functional test\n        run: |\n          npx playwright test\n</code></pre> .github/workflows/1.2.continuous.integration.yml<pre><code>name: 1.2 Run Checks on Merge Queue\n\non:\n  merge_group:\n    types: [checks_requested]\n  workflow_call: {}\n\npermissions:\n  actions: write\n  contents: read\n  security-events: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n  TETRIS_APP_HOST: \"127.0.0.1\"\n  TETRIS_APP_PORT: \"8080\"\n  TETRIS_APP_PATH: \"github-devsecops-fundamentals\"\n\njobs:\n  run-acceptance:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n      - name: Install Python Dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.ci.txt\n      - name: Install NodeJS Dependencies\n        run: npm ci\n      - name: Test Site Build\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n      - name: Install Playwright Browsers\n        run: npx playwright install --with-deps chromium\n      - name: Run UI Test\n        run: npx playwright test\n      - name: Upload UI Test Report\n        uses: actions/upload-artifact@v3\n        if: always()\n        with:\n          name: playwright-report\n          path: playwright-report/\n          retention-days: 30\n</code></pre> </li> </ol> <ol> <li> <p>Commit the changes to a new branch and publish it for a review.</p> <pre><code>git checkout -b continuous-deployment\ngit add .\ngit commit -m \"Integrate tetris game\"\ngit push -u origin continuous-deployment\n</code></pre> </li> </ol>"},{"location":"exercises/01.collaborate/03/","title":"Anatomy of GitHub Workflow","text":"<p>Understanding the workflow file</p>"},{"location":"exercises/01.collaborate/03/#optional-the-name-of-the-workflow-as-it-will-appear-in-the-actions-tab-of-the-github-repository-if-this-field-is-omitted-the-name-of-the-workflow-file-will-be-used-instead","title":"Optional - The name of the workflow as it will appear in the \"Actions\" tab of the GitHub repository. If this field is omitted, the name of the workflow file will be used instead.","text":"<p>name: learn-github-actions</p>"},{"location":"exercises/01.collaborate/03/#optional-the-name-for-workflow-runs-generated-from-the-workflow-which-will-appear-in-the-list-of-workflow-runs-on-your-repositorys-actions-tab-this-example-uses-an-expression-with-the-github-context-to-display-the-username-of-the-actor-that-triggered-the-workflow-run-for-more-information-see-autotitle","title":"Optional - The name for workflow runs generated from the workflow, which will appear in the list of workflow runs on your repository's \"Actions\" tab. This example uses an expression with the <code>github</code> context to display the username of the actor that triggered the workflow run. For more information, see \"AUTOTITLE.\"","text":"<p>run-name: ${{ github.actor }} is learning GitHub Actions</p>"},{"location":"exercises/01.collaborate/03/#specifies-the-trigger-for-this-workflow-this-example-uses-the-push-event-so-a-workflow-run-is-triggered-every-time-someone-pushes-a-change-to-the-repository-or-merges-a-pull-request-this-is-triggered-by-a-push-to-every-branch-for-examples-of-syntax-that-runs-only-on-pushes-to-specific-branches-paths-or-tags-see-autotitle","title":"Specifies the trigger for this workflow. This example uses the <code>push</code> event, so a workflow run is triggered every time someone pushes a change to the repository or merges a pull request.  This is triggered by a push to every branch; for examples of syntax that runs only on pushes to specific branches, paths, or tags, see \"AUTOTITLE.\"","text":"<p>on: [push]</p>"},{"location":"exercises/01.collaborate/03/#groups-together-all-the-jobs-that-run-in-the-learn-github-actions-workflow","title":"Groups together all the jobs that run in the <code>learn-github-actions</code> workflow.","text":"<p>jobs:</p>"},{"location":"exercises/01.collaborate/03/#defines-a-job-named-check-bats-version-the-child-keys-will-define-properties-of-the-job","title":"Defines a job named <code>check-bats-version</code>. The child keys will define properties of the job.","text":"<p>check-bats-version:</p>"},{"location":"exercises/01.collaborate/03/#configures-the-job-to-run-on-the-latest-version-of-an-ubuntu-linux-runner-this-means-that-the-job-will-execute-on-a-fresh-virtual-machine-hosted-by-github-for-syntax-examples-using-other-runners-see-autotitle","title":"Configures the job to run on the latest version of an Ubuntu Linux runner. This means that the job will execute on a fresh virtual machine hosted by GitHub. For syntax examples using other runners, see \"AUTOTITLE\"","text":"<pre><code>runs-on: ubuntu-latest\n</code></pre>"},{"location":"exercises/01.collaborate/03/#groups-together-all-the-steps-that-run-in-the-check-bats-version-job-each-item-nested-under-this-section-is-a-separate-action-or-shell-script","title":"Groups together all the steps that run in the <code>check-bats-version</code> job. Each item nested under this section is a separate action or shell script.","text":"<pre><code>steps:\n</code></pre>"},{"location":"exercises/01.collaborate/03/#the-uses-keyword-specifies-that-this-step-will-run-v4-of-the-actionscheckout-action-this-is-an-action-that-checks-out-your-repository-onto-the-runner-allowing-you-to-run-scripts-or-other-actions-against-your-code-such-as-build-and-test-tools-you-should-use-the-checkout-action-any-time-your-workflow-will-use-the-repositorys-code","title":"The <code>uses</code> keyword specifies that this step will run <code>v4</code> of the <code>actions/checkout</code> action. This is an action that checks out your repository onto the runner, allowing you to run scripts or other actions against your code (such as build and test tools). You should use the checkout action any time your workflow will use the repository's code.","text":"<pre><code>  - uses: actions/checkout@v4\n</code></pre>"},{"location":"exercises/01.collaborate/03/#this-step-uses-the-actionssetup-nodev3-action-to-install-the-specified-version-of-the-nodejs-this-example-uses-version-14-this-puts-both-the-node-and-npm-commands-in-your-path","title":"This step uses the <code>actions/setup-node@v3</code> action to install the specified version of the Node.js. (This example uses version 14.) This puts both the <code>node</code> and <code>npm</code> commands in your <code>PATH</code>.","text":"<pre><code>  - uses: actions/setup-node@v3\n    with:\n      node-version: '14'\n</code></pre>"},{"location":"exercises/01.collaborate/03/#the-run-keyword-tells-the-job-to-execute-a-command-on-the-runner-in-this-case-you-are-using-npm-to-install-the-bats-software-testing-package","title":"The <code>run</code> keyword tells the job to execute a command on the runner. In this case, you are using <code>npm</code> to install the <code>bats</code> software testing package.","text":"<pre><code>  - run: npm install -g bats\n</code></pre>"},{"location":"exercises/01.collaborate/03/#finally-youll-run-the-bats-command-with-a-parameter-that-outputs-the-software-version","title":"Finally, you'll run the <code>bats</code> command with a parameter that outputs the software version.","text":"<pre><code>  - run: bats -v\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/","title":"Secure the Software Supply Chain","text":"<p>Continuous Delivery and Secure Supply Chain</p> <p>Supply chain security is integral to continuous delivery. With the accelerated use of open source, most projects depend on hundreds of open-source dependencies. This poses a security problem: what if the dependencies you're using are vulnerable? You could be putting your users at risk of a supply chain attack. One of the most important things you can do to protect your supply chain is to patch your vulnerable dependencies and replace any malware.</p> <p>Building on the progress from previous exercises, we will apply supply chain security and continuously deliver the product by fulfilling the following objectives.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/#objectives","title":"Objectives","text":"<ul> <li> Create Integration Checks for the <code>Tetris</code> app using GitHub Actions.</li> <li> Create a Continuous Delivery workflow for the <code>Tetris</code> app using GitHub Actions.</li> <li> Create a new release <code>tag</code> for the <code>Tetris</code> app using GitHub Actions.</li> <li> Create a Compliance using CodeQL, Dependency Review, and Dependabot.</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/#expected-outcomes","title":"Expected Outcomes","text":"<p>The outcomes of this lab are:</p> <ul> <li> Increased familiarity with GitHub Actions.</li> <li> Familiarity with GitHub Packages.</li> <li> Familiarity with the GitHub CodeQL analysis.</li> <li> Familiarity with the GitHub Dependency Review Action.</li> <li> Familiarity with the GitHub Dependabot.</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/#resources","title":"\ud83d\udcda Resources","text":"<ul> <li>About status checks</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/00/","title":"Security Checks","text":"<p> Add Security Checks</p> <p>In this part we will add to the continuous integration workflow the security checks which be run on the Pull Request open event.</p> <p>Note</p> <p>We will continue working on the same branch <code>continuous-deployment</code> and the same file <code>1.1.continuous.integration.yml</code>.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/00/#step-1-enable-ghas-github-advanced-security-checks-on-github-repository","title":"Step 1. Enable GHAS (GitHub Advanced Security) checks on GitHub Repository","text":"<p>Note</p> <ul> <li>You must have admin permissions on the repository to perform this step.</li> <li>This part is suppose to be done in the prerequisites</li> <li>Change the indentation settings to use 2 spaces</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/00/#step-2-add-security-checks-to-the-continuous-integration-workflow","title":"Step 2. Add security checks to the continuous integration workflow","text":"<ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>01.1.continuous.integration.yml</code>.</li> <li> <p>Add the following content to the file:</p> <p>Security Checks</p> <pre><code>  security-checks:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 20\n\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Install node dependencies\n        run: npm ci\n\n      - name: Dependency Review\n        uses: actions/dependency-review-action@v3\n        with:\n          config-file: &gt;-\n            ./.github/dependency-review-config.yml\n\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n          languages: javascript\n          setup-python-dependencies: \"false\"\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add security checks step\"\ngit push origin continuous-deployment\n</code></pre> </li> </ol> <p>Navigate to the repository on GitHub and open the pull request.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/00/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> <li>GitHub Actions - Workflow syntax for GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/01/","title":"Continuous Delivery","text":"<p> Continuous Delivery</p> <p>In this part we will get our application ready for deployment and then deploy it to GitHub Pages.</p> <p>Note</p> <p>This step will not be run until we merge the pull request first</p>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#1-create-a-github-action-to-build-and-publish-the-application","title":"1. Create a GitHub Action to build and publish the application","text":"<p>Note</p> <p>We will keep working on the same branch <code>continuous-deployment</code>.</p>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#step-1-get-the-last-version-number","title":"Step 1: Get the last version number","text":"<ol> <li>Navigate to <code>.github/workflows</code> and create a new file called <code>2.1.continuous.delivery.yml</code>.</li> <li>Use this worklow to:<ol> <li>Get the last version number</li> <li>Get the next version number</li> <li>Create a tag for the next version for release</li> </ol> </li> <li> <p>Add the following content to the file:</p> <p>Continuous Delivery Workflow</p> <pre><code>name: 2.1 Version Changes to the Main Branch\n\non:\n  push:\n    branches:\n      - main\n  workflow_call: {}\n\njobs:\n  version-main-branch-changes:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          fetch-depth: 0\n          token: ${{ steps.generate-app-token.outputs.token }}\n\n      - name: Get last version number\n        id: get_last_version\n        run: |\n          # Retrieve the last git tag, as we will only be processing one delivery line.\n          last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n          echo \"Last version is $last_version\"\n          echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n\n      - name: Get new version number\n        id: get_new_version\n        run: |\n          major=$(echo $last_version | cut -d. -f1)\n          minor=$(echo $last_version | cut -d. -f2)\n          patch=$(echo $last_version | cut -d. -f3)\n\n          new_patch=$((patch+1))\n\n          new_version=\"$major.$minor.$new_patch\"\n\n          echo \"New version is $new_version\"\n          echo \"new_version=$new_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n        env:\n          last_version: ${{ steps.get_last_version.outputs.last_version }}\n\n      - name: Create tag for the new version\n        run: |\n          git config --global user.name \"${GITHUB_ACTOR}\"\n          git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n\n          if git tag -a \"$new_version\" -m \"Version $new_version\"; then\n            git push --follow-tags origin \"$new_version\"\n          else\n            echo \"Failed to creat tag $new_version, it probably already exists\"\n          fi\n        env:\n          new_version: ${{ steps.get_new_version.outputs.new_version }}-release\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - add continuous-Delivery\"\ngit push origin continuous-deployment\n</code></pre> </li> </ol>"},{"location":"exercises/02.secure.the.software.supply.chain/01/#resources","title":"Resources","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> <li>GitHub Actions - Workflow syntax for GitHub Actions</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02-extra/","title":"Extra: Packing The Application","text":"<p> Packing The Application</p> <p>In this step we will containerize the application using Docker and push to GitHub Container Registry.</p> <p>Note</p> <p>We will continue working on the same branch <code>continuous-deployment</code>.</p> <ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>3.extra.container.image.packaging.yml</code>.</li> <li> <p>Add the following content to the file:</p> <p>Package Delivery Artifacts</p> <pre><code>name: 2.3 (Optional) Package Container Image\n\non:\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n  packages: write\n\njobs:\n  build-and-push:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push to GHCR\n        uses: docker/build-push-action@v2\n        with:\n          push: true\n          context: ${{ github.workspace }}\n          tags: ghcr.io/${{ github.repository }}:${{ github.sha }}\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - push Docker image to GitHub Packages\"\ngit push origin continuous-deployment\n</code></pre> </li> </ol> <ul> <li>Navigate to the repository on GitHub and open a pull request.</li> <li> <p>After the workflow is finished, navigate to the GitHub Container Registry and verify that the container image was pushed successfully.</p> <p></p> </li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02-extra/#resources","title":"Resources","text":"<ul> <li>Docker</li> <li>GitHub Container Registry</li> </ul>"},{"location":"exercises/02.secure.the.software.supply.chain/02/","title":"Build and Upload Application Artifact","text":"<p> Build and Upload Application Artifact</p> <p>In this step we will build the application and upload the artifact to GitHub Packages once the release tag is created on step Create Tag Step.</p> <p>Note</p> <p>We will continue working on the same branch <code>continuous-deployment</code>.</p> <ol> <li>Navigate to <code>.github/workflows</code> and create a new file with name <code>2.2.continuous.delivery.yml</code>.</li> <li>On this step will build the application and upload the artifact to GitHub Packages as following:<ol> <li>Build and Archive Artifact</li> <li>Draft The Release</li> <li>Upload and Publish The Release</li> </ol> </li> <li>Add the following content to the file <code>2.2.continuous.delivery.yml</code>:</li> </ol> <p>Build and Archive Artifact</p> <pre><code>name: 2.2 Package Delivery Artifacts &amp; Create Release\n\non:\n  push:\n    tags:\n      - \"*-release\"\n  workflow_dispatch: {}\n\npermissions:\n  contents: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n\njobs:\n  package-delivery:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.12\n      - name: Install Python dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n      - name: Build Site\n        run: |\n          python -m mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n      - name: Archive Site\n        run: |\n          zip -r ${{ env.SITE_DIR }}.zip ${{ env.SITE_DIR }}\n      - run: |\n          echo \"Site directory ${{ env.SITE_DIR }} content:\"\n          ls -al ${{ env.SITE_DIR }}\n\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Draft release\n        uses: actions/github-script@v6\n        id: draft-release\n        with:\n          github-token: ${{ steps.generate-app-token.outputs.token }}\n          script: |\n\n            const response = await github.request(\n              'POST /repos/{owner}/{repo}/releases',\n              {\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                draft: true,\n                tag_name: '${{ github.ref }}',\n                discussion_category_name: 'announcements',\n                generate_release_notes: true,\n                make_latest: 'legacy',\n                headers: {\n                  'X-GitHub-Api-Version': '2022-11-28'\n                }\n              }\n            );\n\n            console.dir(response);\n\n            return response.data.id;\n\n      - name: Upload release asset\n        run: |\n          curl -L \\\n            -X POST \\\n            -H \"Accept: application/vnd.github+json\" \\\n            -H \"Authorization: Bearer ${{ steps.generate-app-token.outputs.token }}\" \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\" \\\n            -H \"Content-Type: application/octet-stream\" \\\n            \"https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.draft-release.outputs.result }}/assets?name=${{ env.SITE_DIR }}.zip\" \\\n            --data-binary \"@${{ env.SITE_DIR }}.zip\"\n\n      - name: Publish release\n        uses: actions/github-script@v6\n        id: publish-release\n        with:\n          github-token: ${{ steps.generate-app-token.outputs.token }}\n          script: |\n\n            const response = await github.request(\n              'PATCH /repos/{owner}/{repo}/releases/{release_id}',\n              {\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                release_id: ${{ steps.draft-release.outputs.result }},\n                draft: false,\n                discussion_category_name: 'announcements',\n                make_latest: 'true',\n                headers: {\n                  'X-GitHub-Api-Version': '2022-11-28'\n                }\n              }\n            );\n\n            console.dir(response);\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: add continuous delivery workflow for building and publishing the application\"\ngit push origin continuous-deployment\n</code></pre>"},{"location":"exercises/02.secure.the.software.supply.chain/02/#resources","title":"Resources","text":"<ul> <li>GitHub Packages</li> </ul>"},{"location":"exercises/03.automate.release/","title":"Automate Deployment of Releases","text":"<p>Continuous Deployment</p> <p>Continuous deployment (CD) is the practice of using automation to publish and deploy software updates. As part of the typical CD process, the code is automatically built and tested before deployment.</p> <p>Continuous deployment is often coupled with continuous integration which we have seen earlier. Building on the progress from previous exercises, we will apply continuous deployment mindset by fulfilling the following objectives.</p>"},{"location":"exercises/03.automate.release/#objectives","title":"Objectives","text":"<ul> <li> Validate releases</li> <li> Execute production deployments on successful validation of respective releases</li> </ul>"},{"location":"exercises/03.automate.release/00/","title":"Continuous Deployment","text":"<p> Deliver high quality value at speed</p> <p>Our goal is to create a Tetris Game to delight our site visitors. On complete development of the feature, we want to validate and ship the value to customers at high velocity.</p> <ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>03.continuous.deployment.yml</code>.</li> <li> <p>Add the following content to the file:</p> <p>Deploy Release</p> <pre><code>name: 3. Deploy Release\n\non:\n  release:\n    types:\n      - released\n  workflow_dispatch: {}\n\nconcurrency:\n  group: github-pages\n  cancel-in-progress: false\n\npermissions:\n  contents: write\n  deployments: write\n  pages: write\n  id-token: write\n\nenv:\n  CI: true\n  SITE_DIR: site\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - uses: actions/create-github-app-token@v1\n        id: generate-app-token\n        with:\n          app-id: ${{ vars.APP_ID_ACTIONS_ASSISTANT }}\n          private-key: ${{ secrets.APP_PRIVATE_KEY_ACTIONS_ASSISTANT }}\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v3\n\n      - name: Download release asset\n        id: download-release-asset\n        run: |\n          cat &lt;&lt; 'EOF' &gt; event.json\n          ${{ toJson(github.event) }}\n          EOF\n          asset_id=$(cat event.json | jq '.release.assets[] | select(.name == \"${{ env.SITE_DIR }}.zip\") | .id')\n\n          curl --location --output '${{ env.SITE_DIR }}.zip'                          \\\n            -H \"Accept: application/octet-stream\"                                     \\\n            -H \"Authorization: Bearer ${{ steps.generate-app-token.outputs.token }}\"  \\\n            -H \"X-GitHub-Api-Version: 2022-11-28\"                                     \\\n            \"https://api.github.com/repos/${{ github.repository }}/releases/assets/${asset_id}\"\n\n          unzip -o \"${{ env.SITE_DIR }}.zip\" -d .\n\n          echo '##### Debug'\n          ls -al \"${{ env.SITE_DIR }}\"\n\n      - name: Fix site file permissions\n        run: |\n          chmod -c -R +rX \"${{ env.SITE_DIR }}/\" | while read line; do\n            echo \"::warning title=Invalid file permissions automatically fixed::$line\"\n          done\n\n      - name: Upload Pages artifact\n        uses: actions/upload-pages-artifact@v2\n        with:\n          path: \"${{ env.SITE_DIR }}\"\n          retention-days: \"2\"\n\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n        with:\n          token: ${{ steps.generate-app-token.outputs.token }}\n</code></pre> <p>Push changes to Github</p> <pre><code>git add .\ngit commit -m \"feat: update continuous integration workflow - deploy app to GitHub Pages\"\ngit push origin continuous-deployment\n</code></pre> </li> <li> <p>Navigate to the repository on GitHub and open the pull request.</p> </li> <li>Finally, click on the button <code>Merge pull request</code> and select <code>Confirm merge</code>.</li> </ol>"},{"location":"exercises/03.automate.release/00/#recap","title":"Recap","text":"<p>So far, we have reached the following milestones:</p> <ol> <li>Enable Security Features and checks on Step.</li> <li>Create a new release tag on Step.</li> <li>Build and Upload Application Artifact on Step.</li> <li>Container Image Packaging on Step.</li> <li>Create a new release deployment.</li> </ol>"},{"location":"exercises/03.automate.release/00/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> </ul>"},{"location":"exercises/03.automate.release/01/","title":"Review of Workshop Outcome","text":""},{"location":"exercises/03.automate.release/01/#recap","title":"Recap","text":"<pre><code>flowchart TD\n    subgraph Checks\n        A[Code Linting]\n        B[UI Testing]\n        D[Security Scanning]\n        C[Workflow Failure]\n    end\n\n    A--&gt;|Pass|B\n    A--&gt;|Fail|C\n    B--&gt;|Pass|D\n    B--&gt;|Fail|C\n\n    subgraph Release Process\n        E[Build and Upload Artifact]\n        F[Draft release]\n        G[Publish Release]\n        H{Validate}\n        I[Deploy Release]\n        J[Failure Workflow]\n\n    end\n\n    D--&gt;|Pass|K\n    D--&gt;|Fail|C\n    E--&gt;|Success|F\n    F--&gt;|Success|G\n    F--&gt;|Fail|J\n    G--&gt;|Valid|H\n    G--&gt;|Invalid|J\n    H--&gt;|Pass|I\n    H--&gt;|Fail|J\n    E--&gt;|Fail|J\n\n    subgraph Main Branch\n        K[Push to Main Branch]\n    end\n\n    K--&gt;|Success|E\n</code></pre>"},{"location":"exercises/03.automate.release/01/#observations","title":"Observations","text":"<p>Let us observe the outcome of the exercises we have completed as a whole.</p> <ol> <li>Navigate to the <code>Actions</code> tab and verify the workflows are running (or have completed running).</li> <li>Check the tag was created on the repository.</li> <li>Check the release was created on the repository.</li> <li>Check the release was created on the repository.</li> </ol>"}]}