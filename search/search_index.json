{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#github-devsecops-fundamentals-workshop-github-universe-2023","title":"GitHub DevSecOps Fundamentals | Workshop, GitHub Universe 2023","text":"<p>This self-paced workshop will enable you acquire the capabilities to implement a DevSecOps mindset, leveraging the GitHub platform for a seamless developer experience.</p> <p></p>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<ul> <li> Collaborate effectively for high-velocity productivity</li> <li> Apply preventive security to every aspect of the development process</li> <li> Secure the software supply chain</li> <li> Automate product release and business processes in general</li> </ul> <p>Target Audience</p> <p>For participants at the start of their DevSecOps journey, the workshop addresses the following key concerns:</p> <ul> <li>How do I align the quest for high velocity delivery with the goals and visions of my organization?</li> <li>How do I efficiently develop a project and manage code?</li> <li>How do I securely package artifacts and store them for distribution?</li> <li>How do I securely deploy artifacts/packages?</li> <li>How do I generally automate processes in the business?</li> </ul> <p>For the experts who are further along or advanced in their DevSecOps adoption journey, the workshop provides guidance and challenges you to reduce complications in the implementation of DevSecOps practices:</p> <ul> <li>How do I consolidate tools and remove complications due to tool-bloat?</li> <li>How do I simplify the software supply chain process?</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Prepare before the workshop</p> <p>To ensure a seamless workshop experience, complete the following checklist items in order.</p> <ol> <li> <p> Set up a GitHub account</p> <p>Login to your GitHub  You may create a new GitHub account, if you do not already have one. (1)</p> <ol> <li> Keep your @handle handy.</li> </ol> <p> Create a new GitHub account </p> </li> <li> <p> Clone the workshop project to your own account</p> <ol> <li> Create workshop project</li> <li> <p>In the new tab, most of the prompts will automatically fill in for you.</p> <ul> <li>For owner, choose your personal account.</li> <li> <p>We recommend creating a public repository. (1)</p> <ol> <li> Public repositories benefit from<ul> <li>Free use of GitHub Actions minutes.</li> <li>Free use of GitHub Advanced Security features.</li> </ul> </li> </ol> </li> <li> <p>Scroll down and click the Create repository button at the bottom of the form.</p> <p></p> </li> </ul> </li> <li> <p>After your new repository is created, wait about 20 seconds, then refresh the page. </p> </li> </ol> </li> <li> <p> Enable Discussions</p> <p> Enabling GitHub Discussions on your repository </p> </li> <li> <p> Configure base security</p> <ol> <li>Navigate to the  Settings tab on your new workshop repository.</li> <li> <p>Under the Security section of the menu, select  Code security and analysis. Then configure the settings to match as follows (by clicking Enable where the option is/becomes available).</p> <p></p> </li> </ol> <p></p> </li> <li> <p> Provision a new cloud development environment for the workshop</p> <p>GitHub Codespaces enables you to instantly start coding on the workshop project. Personal accounts on GitHub can benefit from a free quota of GitHub Codespaces usage.</p> <ol> <li> <p>Navigate to the  Code tab.</p> </li> <li> <p>Open the  Code  menu and click on  Create codespaces on main.</p> </li> <li> <p>Leave the development environment to initialize and run, we will come back to use it later.</p> <p></p> </li> </ol>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Secure at every step</li> <li>Start coding instantly with Codespaces</li> <li>Create diagrams to convey information through charts and graphs</li> <li>Include diagrams in your Markdown files with Mermaid</li> <li>Security hardening for GitHub Actions</li> <li>Security harden deployments with OpenID Connect</li> </ul>"},{"location":"Labs-Instructions/","title":"Introduction","text":"<p> Milestone</p> <p>Our goal is to create a Tetris Game to delight our site visitors.</p> <p> Outcome: Tetris Game </p>"},{"location":"Labs-Instructions/01.Collaborate/","title":"Collaboration","text":"<p>Challenge</p> <p>Having aligned with stakeholder on the goals and values we aim to deliver to customers. A key challenge we must address to progress on our objectives how to efficiently collaborate with stakeholders towards delivery of business goals.</p>"},{"location":"Labs-Instructions/01.Collaborate/#objectives","title":"Objectives","text":"<p>Behaviors that enable addressing the challenge include</p> <ul> <li> Facilitate tracking of business goal delivery</li> <li> Enable rapid onboarding to project development</li> <li> Provide a standardized validation of work done</li> <li> Enable collaborative validation of done requirement</li> </ul>"},{"location":"Labs-Instructions/01.Collaborate/01.project-management/","title":"Project Management","text":"<p> Collaboratively track business goals to align with organization strategy</p> <ol> <li>Create a project</li> <li>Create a board view</li> <li>Create a new issue describing our goal</li> </ol>"},{"location":"Labs-Instructions/01.Collaborate/02.implement-features/","title":"Implement Features","text":"<p>We want to implement a game of Tetris to excite our site visitors.</p>"},{"location":"Labs-Instructions/01.Collaborate/02.implement-features/#step-1-implement-the-game-and-integrate-it-into-the-site","title":"Step 1: Implement the game and integrate it into the site","text":""},{"location":"Labs-Instructions/01.Collaborate/03.validate-work/","title":"Validate Work Done","text":"<p>Now that you have the lab code, you can start working on your application! This document will walk you through the initial setup steps so that you can start developing.</p>"},{"location":"Labs-Instructions/01.Collaborate/03.validate-work/#step-1-install-dependencies","title":"Step 1: Install Dependencies","text":"<p>Before you can run the sample app locally (or in your Codespace), you will need to install some dependencies.</p> <ol> <li>Run the following command to install the project requirements:</li> </ol> <pre><code>python3 -m pip install --requirement requirements.txt\n</code></pre> <ol> <li> <p>If you would like Codespaces to automatically do this for you next time you start working on the project you may add the following declaration into the root of the Codespaces configuration object:</p> <pre><code>{\n    ...\n    \"postStartCommand\": \"python3 -m pip install --requirement requirements.txt\"\n    ...\n}\n</code></pre> </li> <li> <p>Confirm that the site building tool is available by running the following command</p> </li> </ol> <pre><code>python3 -m mkdocs serve\n</code></pre>"},{"location":"Labs-Instructions/01.Collaborate/03.validate-work/#next-steps","title":"Next Steps","text":"<p>Now that you have rapidly onboarded yourself to the project, it time to Implement Features!</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/","title":"Secure the Software Supply Chain","text":""},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/#introduction","title":"Introduction","text":"<p>The goal of this lab is to create a software supply chain for the <code>Tetris</code> app. The software supply chain will consist of the following steps:</p> <ol> <li>Create Integration Checks</li> <li>Continuous Delivery</li> <li>Pre-Release</li> <li>Compliance</li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/#prerequisites","title":"Prerequisites","text":"<p>The same prerequisites as Lab 1 apply.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/#objectives","title":"Objectives","text":"<p>The objectives of this lab are to:</p> <ol> <li>Create Integration Checks for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a Continuous Delivery workflow for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a new pre-release <code>tag</code> for the <code>Tetris</code> app using GitHub Actions.</li> <li>Create a Compliance using CodeQL, Dependcy Review, and Dependabot.</li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/#lab-outcomes","title":"Lab Outcomes","text":"<p>The outcomes of this lab are:</p> <ol> <li>Get familiar with GitHub Actions.</li> <li>Get familiar with GitHub Packages.</li> <li>Get familiar with the GitHub CodeQL analysis.</li> <li>Get familiar with the GitHub Dependency Review Action.</li> <li>Get familiar with the GitHub Dependabot.</li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/#lab-content","title":"Lab Content","text":"<ol> <li>Create and Enable Security Checks</li> <li>Create pre-relase Tag</li> <li>Create Pre-Release</li> <li>Containerize the application</li> <li>Create Release</li> <li>Merge Pull Request</li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/00/","title":"Secuirty Checks","text":"<p>In this part we will add to the continuous integration workflow the security checks.</p> <ul> <li>Objective: Add security checks to the continuous integration workflow.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: The continuous integration workflow will run the security checks on the Pull Request</li> </ul> <p>Note</p> <p>We will continue working on the same branch <code>contiuous-integration-deployment</code> and the same file <code>01.01.continuous.integration.yml</code>.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/00/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> <li>GitHub Actions - Workflow syntax for GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/00/#lab","title":"Lab","text":""},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/00/#1-enable-enable-ghas-github-advanced-security-checks-on-github-repository","title":"1. Enable Enable GHAS (GitHub Advanced Security) checks on GitHub Repository","text":"<p>Note</p> <p>You must have admin permissions on the repository to perform this step.</p> <ol> <li>Navigate to the repository settings.</li> <li>Select the tab <code>Security &amp; analysis</code>.</li> </ol> <p></p> <ol> <li> <p>Enable <code>Dependabot</code></p> </li> <li> <p>Click on the button <code>EnableDependabot alerts</code>.</p> </li> <li> <p>Click on the button <code>Enable Dependabot security updates</code>.</p> <p></p> </li> <li> <p>Enable <code>Code scanning</code>.</p> </li> <li> <p>Click on the button <code>Set up</code> for <code>CodeQL analysis</code> and select <code>default</code>.</p> <p></p> </li> <li> <p>Enable <code>Secret scanning</code>.</p> </li> <li> <p>Click on the button <code>Enable</code> for <code>Secret scanning</code>.</p> <p></p> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/00/#2-add-security-checks-to-the-continuous-integration-workflow","title":"2. Add security checks to the continuous integration workflow","text":"<ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>01.01.continuous.integration.yml</code>.</li> <li>Add the following content to the file on line <code>68</code>:</li> </ol> <pre><code>    security-checks:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v4\n        with:\n        python-version: 3.11\n    - uses: actions/setup-node@v3\n        with:\n        node-version: 20\n    - name: Install Python dependencies\n        run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Install node dependencies\n        run: npm ci\n    - name: Dependency Review\n        uses: actions/dependency-review-action@v3\n        with:\n        config-file: &gt;-\n            ./.github/dependency-review-config.yml\n    - name: Initialize CodeQL\n        uses: github/codeql-action/init@v2\n        with:\n        languages: python,javascript\n        setup-python-dependencies: \"false\"\n    - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@v2\n</code></pre> <ol> <li>Save the file and commit and push the changes to the <code>contiuous-integration-deployment</code> branch.</li> </ol> <pre><code>    git add .\n    git commit -m \"feat: update continuous integration workflow - add security checks step\"`\n    git push origin continuous-integration-deployment`\n</code></pre> <ol> <li>Nagivate to the repository on GitHub and open the pull request.</li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/","title":"Continues Deployment","text":"<p>In this part we will get our application ready for deployment and deploy it to GitHub Pages.</p> <ul> <li>Objectives: Create a new pre-release version (tag) of the application when our main branch is updated.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: A new pre-release version of the application is created when the main branch is updated.</li> </ul> <p>[!NOTE] This step will not be run until we merge the pull request first</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#prerequisites","title":"Prerequisites","text":"<p>[!NOTE] The prerequisites are the same as in the previous part.</p> <ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#resources","title":"Resources","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> <li>GitHub Actions - Workflow syntax for GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#lab","title":"Lab","text":""},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#1-create-a-github-action-to-build-and-publish-the-application","title":"1. Create a GitHub Action to build and publish the application","text":"<p>[!NOTE] We will keep working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#step-1-get-the-last-version-number","title":"Step 1: Get the last version number","text":"<ol> <li>Navgiate to <code>.github/workflows</code> and create a new file called <code>02.1.continuous.delivery.yml</code>.</li> <li> <p>Add the following content to the file:</p> <pre><code>name: Version Changes to the Main Branch\n\non:\npush:\n    branches:\n    - main\n\njobs:\nversion-main-branch-changes:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n        uses: actions/checkout@v3\n        with:\n        fetch-depth: 0\n    - name: Get last version number\n        id: get_last_version\n        run: |\n        # Retrieve the last git tag, as we will only be processing one delivery line.\n        last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n        echo \"Last version is $last_version\"\n        echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n</code></pre> </li> <li> <p>Save the file and commit and push the changes to the <code>contiuous-integration-deployment</code> branch.</p> <p><code>``bash     git add .     git commit -m \"feat: add continuous delivery workflow\"</code>     git push origin continuous-integration-deployment` ``````</p> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#step-2-get-next-version-number","title":"Step 2: Get next version number","text":"<ol> <li>Navgiate to <code>.github/workflows</code> and open <code>02.1.continuous.delivery.yml</code>.</li> <li> <p>On line <code>24</code> add the following content:</p> <pre><code>- name: Get next version number\n    id: get_next_version\n    run: |\n    # Retrieve the last git tag, as we will only be processing one delivery line.\n    last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n    echo \"Last version is $last_version\"\n    # Split the version into its components\n    a=( ${last_version//./ } )\n    # If the last component is 9, then increment the middle component and reset the last component to 0\n    if [[ ${a[2]} == 9 ]]; then\n        next_version=\"${a[0]}.$((${a[1]}+1)).0\"\n    else\n        # Otherwise increment the last component\n        next_version=\"${a[0]}.${a[1]}.$((${a[2]}+1))\"\n    fi\n    echo \"Next version is $next_version\"\n    echo \"next_version=$next_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n</code></pre> </li> <li> <p>Save the file and commit and push the changes to the <code>contiuous-integration-deployment</code> branch.</p> <p><code>``bash     git add .     git commit -m \"feat: update continuous delivery workflow - add next version number step\"</code>     git push origin continuous-integration-deployment` ``````</p> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#step-3-create-tag-for-the-next-version-for-pre-release","title":"Step 3: Create tag for the next version for pre-release","text":"<ol> <li>Navgiate to <code>.github/workflows</code> and open <code>02.1.continuous.delivery.yml</code>.</li> <li> <p>Add the following content to the file after line <code>38</code>:</p> <pre><code>- name: Create tag for the next version\n    run: |\n      git config --global user.name \"${GITHUB_ACTOR}\"\n      git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n      git tag -a \"$next_version\" -m \"Version $next_version\"\n      git push origin \"$next_version\"\n    env:\n      next_version: ${{ steps.get_next_version.outputs.next_version }}-pre-release\n</code></pre> </li> <li> <p>Save the file and commit and push the changes to the <code>contiuous-integration-deployment</code> branch.</p> <pre><code>    git add .\n    git commit -m \"feat: update continuous delivery workflow - add create tag step\"`\n    git push origin continuous-integration-deployment`\n</code></pre> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/01/#complete-example","title":"Complete Example","text":"<pre><code>name: Version Changes to the Main Branch\n\non:\npush:\n    branches:\n    - main\n\njobs:\nversion-main-branch-changes:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n        uses: actions/checkout@v3\n        with:\n        fetch-depth: 0\n    - name: Get last version number\n        id: get_last_version\n        run: |\n        # Retrieve the last git tag, as we will only be processing one delivery line.\n        last_version=$(git describe --tags --abbrev=0 2&gt;/dev/null || echo \"0.0.0\")\n        echo \"Last version is $last_version\"\n        echo \"last_version=$last_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n    - name: Get next version number\n        id: get_next_version\n        run: |\n        major=$(echo $last_version | cut -d. -f1)\n        minor=$(echo $last_version | cut -d. -f2)\n        patch=$(echo $last_version | cut -d. -f3)\n\n        next_patch=$((patch+1))\n\n        next_version=\"$major.$minor.$next_patch\"\n\n        echo \"Next version is $next_version\"\n        echo \"next_version=$next_version\" &gt;&gt; \"$GITHUB_OUTPUT\"\n        env:\n        last_version: ${{ steps.get_last_version.outputs.last_version }}\n    - name: Create tag for the next version\n        run: |\n        git config --global user.name \"${GITHUB_ACTOR}\"\n        git config --global user.email \"${GITHUB_ACTOR}@users.noreply.github.com\"\n        git tag -a \"$next_version\" -m \"Version $next_version\"\n        git push origin \"$next_version\"\n        env:\n        next_version: ${{ steps.get_next_version.outputs.next_version }}-pre-release\n</code></pre>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02-extra/","title":"Extra: Packing The Application","text":"<p>In this step we will containerize the application using Docker and push to GitHub Container Registry.</p> <ul> <li>Objective: Containerize the application using Docker and push to GitHub Container Registry.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: The application will be containerized and pushed to GitHub Container Registry.</li> </ul> <p>[!NOTE] We will continue working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02-extra/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Container Registry</li> <li>GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02-extra/#resources","title":"Resources","text":"<ul> <li>Docker</li> <li>GitHub Container Registry</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02-extra/#lab","title":"Lab","text":"<ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>03.extra.container.image.packaging.yml</code>.</li> <li> <p>Add the following content to the file:</p> <pre><code>    name: Package Container Image\n\n    on:\n    pull_request:\n        branches:\n        - main\n    workflow_dispatch: {}\n\n    permissions:\n    contents: read\n    packages: write\n\n\n    jobs:\n    build-and-push:\n        runs-on: ubuntu-latest\n        steps:\n        - uses: actions/checkout@v3\n\n        # Connect to GitHub Container Registry (ghcr)\n        - name: Login to GitHub Container Registry\n            uses: docker/login-action@v3\n            with:\n            registry: ghcr.io\n            username: ${{ github.actor }}\n            password: ${{ secrets.GITHUB_TOKEN }}\n\n        - name: Build and push to GHCR\n            uses: docker/build-push-action@v2\n            with:\n            push: true\n            context: ${{ github.workspace }}\n            tags: ghcr.io/${{ github.repository }}:${{ github.sha }}\n</code></pre> </li> <li> <p>Save the file and commit the changes to the branch <code>continuous-integration-deployment</code>.</p> <pre><code>    git add .\n    git commit -m \"feat: add container image packaging workflow\"\n    git push origin continuous-integration-deployment\n</code></pre> </li> <li> <p>Navigate to the repository on GitHub and open a pull request.</p> </li> <li> <p>After the workflow is finished, navigate to the GitHub Container Registry and verify that the container image was pushed successfully.</p> <p></p> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02/","title":"Build and Upload Application Artifact","text":"<p>In this step we will build the application and upload the artifact to GitHub Packages once the pre-relase tag is created on step Create Tag Step.</p> <ul> <li>Objective: Build the application and upload the artifact to GitHub Packages.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: The application will be built and uploaded to GitHub Packages.</li> </ul> <p>[!NOTE] We will continue working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Packages</li> <li>GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02/#resources","title":"Resources","text":"<ul> <li>GitHub Packages</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/02/#lab","title":"Lab","text":"<p>[!IMPORTANT] This step requires the previous step Create Tag Step to be completed first and the pre-realse tag is created and merging the pull request to main branch on step Merge Pull Request Step.</p> <ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>02.2.continuous.delivery.yml</code>.</li> <li> <p>Add the following content to the file:</p> <pre><code>    name: Package Delivery Artifacts\n\n    on:\n    push:\n        tags:\n        - \"*pre-release*\"\n    workflow_dispatch: {}\n\n    permissions:\n    contents: read\n    packages: write\n    pages: write\n\n    env:\n    CI: 1\n    SITE_DIR: _site\n\n    jobs:\n    package-delivery:\n        runs-on: ubuntu-latest\n        steps:\n        - name: Checkout\n            uses: actions/checkout@v2\n        - name: Setup GitHub Pages\n            uses: actions/configure-pages@v3\n            with:\n            token: ${{ secrets.GITHUB_TOKEN }}\n            enablement: \"true\"\n        - name: Build Site\n            run: |\n            mkdocs build --clean --strict --verbose --site-dir '${{ env.SITE_DIR }}'\n        - name: Create Pre-Release\n            uses: softprops/action-gh-release@v1\n            with:\n            files: ${{ env.SITE_DIR }}\n            prerelease: true\n            generate_release_notes: true\n            fail_on_unmatched_files: true\n            discussion_category_name: Announcements\n</code></pre> </li> <li> <p>Save the file and commit the changes to the branch <code>continuous-integration-deployment</code>.</p> <pre><code>    git add .\n    git commit -m \"Build and upload application artifact\"\n    git push origin continuous-integration-deployment\n</code></pre> </li> <li> <p>Navigate to the repository on GitHub.</p> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/03/","title":"Deploye the application to GitHub Pages","text":"<p>In this step once we clarify the application is ready to be deployed to pre-relase we will create a new release deployment.</p> <ul> <li>Objective: Create a new release deployment.</li> <li>Estimated completion time: 5 minutes</li> <li>Outcome: A production release will be created.</li> </ul> <p>[!NOTE] We will continue working on the same branch <code>contiuous-integration-deployment</code>.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/03/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub Codespaces</li> <li>GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/03/#resources","title":"Resources","text":"<ul> <li>GitHub Actions</li> </ul>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/03/#lab","title":"Lab","text":"<p>[!IMPORTANT] This step requires the previous step Create pre-release Step to be completed first and the pre-realse tag is created and merging the pull request to main branch on step Merge Pull Request Step.</p> <ol> <li>Navigate to <code>.github/workflows</code> and open the file <code>03.continuous.deployment.yml</code>.</li> <li> <p>Add the following content to the file:</p> <p>```yml     name: Deploy Release</p> <pre><code>on:\nrelease:\n    types:\n    - released\nworkflow_dispatch: {}\n\nconcurrency:\ngroup: production-deployment\ncancel-in-progress: false\n\npermissions:\npackages: none\ncontents: write\nissues: write\ndeployments: write\n\nenv:\nCI: 1\n\njobs:\ndeploy:\n    runs-on: ubuntu-latest\n    environment:\n    name: production\n    url: ${{ steps.deploy.outputs.site-url }}\n\n    steps:\n    - name: Download release\n        run: |\n        curl -o assets.zip ${{ github.event.release.assets_url }}\n        # unarchive asset\n\n    - name: Deploy\n        run: |\n        # do git configs\n        git push origin HEAD:gh-pages\n\n    - uses: actions/checkout@v3\n    - uses: actions/setup-node@v3\n        with:\n        node-version: 20\n    - name: Install NodeJS dependencies\n        run: npm ci\n    - name: Install Playwright Browsers\n        run: npx playwright install --with-deps\n    - name: Run post-deployment UI test\n        run: |\n        # 1. disable automatic run of webserver by test framework\n        # 2. set baseurl to ${{ steps.deploy.outputs.site-url }}\n        npx playwright test\n        # env:\n        #   TETRIS_APP_HOST: \"127.0.0.1\"\n        #   TETRIS_APP_PORT: \"8000\"\n        #   TETRIS_APP_PATH: \"pages/githubuniverseworkshops/github-devsecops-fundamentals\"\n```\n</code></pre> </li> <li> <p>Save the file and commit the changes to the branch <code>continuous-integration-deployment</code>.</p> <pre><code>    git add .\n    git commit -m \"feat: add deployment workflow\"\n    git push origin continuous-integration-deployment\n</code></pre> </li> </ol>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/03/#recap","title":"Recap","text":"<p>In this module we have created:</p> <ol> <li>Enable Security Features and checks on Step.</li> <li>Create a new pre-release tag on Step.</li> <li>Build and Upload Application Artifact on Step.</li> <li>Container Image Packaging on Step.</li> <li>Create a new release deployment on Step.</li> </ol> <p>Now let's move to our final step by merging the pull request to main branch on Step and test all of the steps above.</p>"},{"location":"Labs-Instructions/02.Secure-Software-Supply-Chain/04/","title":"Deploy Release","text":"<p>In this step will merge our pull request to run the workflows we have created on the previous steps.</p> <ol> <li>Navgiate to the repository on GitHub and open the pull request.</li> <li>Click on the button <code>Merge pull request</code> and select <code>Confirm merge</code>.</li> <li>Navigate to the <code>Actions</code> tab and verify the workflows are running.</li> <li>Check the tag was created on the repository.</li> <li>Check the pre-release was created on the repository.</li> <li>Check the release was created on the repository.</li> </ol>"},{"location":"Labs-Instructions/03.Automate-Release/","title":"Release Automation","text":""}]}